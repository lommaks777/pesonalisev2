export const dynamic = "force-dynamic";
import fs from "fs";
import path from "path";
import { detectTemplateFormat, transformOldToNew, validateNewTemplate, type LessonTemplate, type LegacyLessonTemplate } from "@/lib/services/lesson-templates";

// New template structure with emoji keys or plain keys
type TemplateData = {
  // Emoji-based keys (current format)
  "üëã –í–≤–µ–¥–µ–Ω–∏–µ"?: string;
  "üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã"?: string[];
  "üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã"?: string[];
  "‚ö†Ô∏è –í–∞–∂–Ω–æ"?: string[];
  "üß∞ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞"?: string;
  "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"?: string;
  "_–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞_"?: string;
  // Plain keys (alternative format)
  introduction?: string;
  key_points?: string[];
  practical_tips?: string[];
  important_notes?: string[];
  equipment_preparation?: string;
  homework?: string;
  motivational_line?: string;
  // Legacy keys
  summary_short?: string;
  why_watch?: string;
  quick_action?: string;
  homework_20m?: string;
  [key: string]: any;
};

type NormalizedTemplate = {
  introduction: string;
  keyPoints: string[];
  practicalTips: string[];
  importantNotes?: string[];
  equipmentPreparation?: string;
  homework: string;
  motivationalLine: string;
};

function normalizeTemplate(raw: TemplateData): NormalizedTemplate | null {
  // Try emoji keys first
  const introduction = raw["üëã –í–≤–µ–¥–µ–Ω–∏–µ"] || raw.introduction;
  const keyPoints = raw["üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã"] || raw.key_points;
  const practicalTips = raw["üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã"] || raw.practical_tips;
  const importantNotes = raw["‚ö†Ô∏è –í–∞–∂–Ω–æ"] || raw.important_notes;
  const equipmentPreparation = raw["üß∞ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞"] || raw.equipment_preparation;
  const homework = raw["üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"] || raw.homework;
  const motivationalLine = raw["_–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞_"] || raw.motivational_line;

  if (!introduction || !keyPoints || !practicalTips || !homework || !motivationalLine) {
    return null; // Invalid new format
  }

  return {
    introduction,
    keyPoints: Array.isArray(keyPoints) ? keyPoints : [],
    practicalTips: Array.isArray(practicalTips) ? practicalTips : [],
    importantNotes: importantNotes && Array.isArray(importantNotes) ? importantNotes : undefined,
    equipmentPreparation,
    homework,
    motivationalLine,
  };
}

function readTemplates(): Array<{ 
  lessonNumber: number; 
  fileName: string; 
  template: NormalizedTemplate | null;
  format: 'old' | 'new' | 'unknown';
  errors: string[];
}> {
  const dir = path.join(process.cwd(), "store", "shvz");
  const files = fs.readdirSync(dir).filter((f) => f.endsWith("-final.json"));

  const items: Array<{ lessonNumber: number; fileName: string; template: NormalizedTemplate | null; format: 'old' | 'new' | 'unknown'; errors: string[] }> = [];
  
  for (const file of files) {
    // File name format: "{n}-{...}-final.json" or "{n}-{n}-{id}-final.json"
    const match = file.match(/^([0-9]{1,2})-/);
    if (!match) continue;
    const lessonNumber = Number(match[1]);
    
    try {
      const raw = fs.readFileSync(path.join(dir, file), "utf8");
      const json = JSON.parse(raw) as TemplateData;
      
      const format = detectTemplateFormat(json);
      const normalized = normalizeTemplate(json);
      
      let errors: string[] = [];
      if (normalized) {
        // Validate word count for key_points
        normalized.keyPoints.forEach((point, idx) => {
          const wordCount = point.split(/\s+/).length;
          if (wordCount > 18) {
            errors.push(`–ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç ${idx + 1}: ${wordCount} —Å–ª–æ–≤ (–º–∞–∫—Å. 18)`);
          }
        });
        
        // Validate array lengths
        if (normalized.keyPoints.length < 4 || normalized.keyPoints.length > 6) {
          errors.push(`–ö–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤: ${normalized.keyPoints.length} (–Ω—É–∂–Ω–æ 4-6)`);
        }
        if (normalized.practicalTips.length < 3 || normalized.practicalTips.length > 5) {
          errors.push(`–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤: ${normalized.practicalTips.length} (–Ω—É–∂–Ω–æ 3-5)`);
        }
      } else if (format === 'old') {
        errors.push("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–æ—Ä–º–∞—Ç (5 –ø–æ–ª–µ–π)");
      }
      
      items.push({ lessonNumber, fileName: file, template: normalized, format, errors });
    } catch (err) {
      items.push({ 
        lessonNumber, 
        fileName: file, 
        template: null, 
        format: 'unknown',
        errors: ['–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON'] 
      });
    }
  }

  return items.sort((a, b) => a.lessonNumber - b.lessonNumber);
}

export default function TemplatesPage() {
  const templates = readTemplates();

  return (
    <div className="space-y-8">
      <h1 className="text-2xl font-semibold">–®–∞–±–ª–æ–Ω—ã —É—Ä–æ–∫–æ–≤ (—Ä—ã–±—ã)</h1>
      <p className="text-sm text-muted-foreground">
        –ù–∏–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ store/shvz/*-final.json
      </p>

      <div className="space-y-6">
        {templates.length === 0 && (
          <div className="rounded-md border p-4 text-sm text-muted-foreground">
            –§–∞–π–ª—ã —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π <code>pnpm templates:regenerate</code>.
          </div>
        )}
        {templates.map(({ lessonNumber, fileName, template, format, errors }) => (
          <section key={fileName} className="rounded-lg border p-5">
            <div className="mb-2 flex items-center justify-between">
              <h2 className="text-lg font-medium">–£—Ä–æ–∫ {lessonNumber}</h2>
              <div className="flex items-center gap-2">
                <span className="text-xs text-muted-foreground">{fileName}</span>
                {format === 'new' && (
                  <span className="rounded-full bg-green-100 px-2 py-0.5 text-xs text-green-700">
                    –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                  </span>
                )}
                {format === 'old' && (
                  <span className="rounded-full bg-yellow-100 px-2 py-0.5 text-xs text-yellow-700">
                    –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                  </span>
                )}
              </div>
            </div>

            {errors.length > 0 && (
              <div className="mb-4 rounded-md bg-yellow-50 p-3 border border-yellow-200">
                <h4 className="text-sm font-semibold text-yellow-800 mb-1">‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</h4>
                <ul className="list-disc list-inside text-xs text-yellow-700 space-y-0.5">
                  {errors.map((err, idx) => (
                    <li key={idx}>{err}</li>
                  ))}
                </ul>
              </div>
            )}

            {template && (
              <>
                <div className="mb-4">
                  <h3 className="font-semibold flex items-center gap-2">
                    <span>üëã</span> –í–≤–µ–¥–µ–Ω–∏–µ
                  </h3>
                  <p className="text-sm whitespace-pre-wrap mt-1">{template.introduction}</p>
                </div>

                <div className="mb-4">
                  <h3 className="font-semibold flex items-center gap-2">
                    <span>üîë</span> –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã 
                    <span className="text-xs text-muted-foreground">({template.keyPoints.length})</span>
                  </h3>
                  <ul className="list-disc list-inside text-sm space-y-1 mt-1">
                    {template.keyPoints.map((point, idx) => (
                      <li key={idx} className="text-sm">{point}</li>
                    ))}
                  </ul>
                </div>

                <div className="mb-4">
                  <h3 className="font-semibold flex items-center gap-2">
                    <span>üí°</span> –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
                    <span className="text-xs text-muted-foreground">({template.practicalTips.length})</span>
                  </h3>
                  <ul className="list-disc list-inside text-sm space-y-1 mt-1">
                    {template.practicalTips.map((tip, idx) => (
                      <li key={idx} className="text-sm">{tip}</li>
                    ))}
                  </ul>
                </div>

                {template.importantNotes && template.importantNotes.length > 0 && (
                  <div className="mb-4 rounded-md bg-yellow-50 p-3 border border-yellow-200">
                    <h3 className="font-semibold flex items-center gap-2 text-yellow-800">
                      <span>‚ö†Ô∏è</span> –í–∞–∂–Ω–æ
                    </h3>
                    <ul className="list-disc list-inside text-sm space-y-1 mt-1 text-yellow-700">
                      {template.importantNotes.map((note, idx) => (
                        <li key={idx} className="text-sm">{note}</li>
                      ))}
                    </ul>
                  </div>
                )}

                {template.equipmentPreparation && (
                  <div className="mb-4 rounded-md bg-gray-50 p-3 border border-gray-200">
                    <h3 className="font-semibold flex items-center gap-2">
                      <span>üß∞</span> –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
                    </h3>
                    <p className="text-sm mt-1">{template.equipmentPreparation}</p>
                  </div>
                )}

                <div className="mb-4 rounded-md bg-blue-50 p-3 border border-blue-200">
                  <h3 className="font-semibold flex items-center gap-2 text-blue-800">
                    <span>üìö</span> –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
                  </h3>
                  <p className="text-sm mt-1 text-blue-700">{template.homework}</p>
                </div>

                <div className="rounded-md bg-gray-50 p-3 border-l-4 border-gray-400">
                  <p className="text-sm italic text-gray-700">{template.motivationalLine}</p>
                </div>
              </>
            )}

            {!template && (
              <div className="text-sm text-red-600">
                –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω
              </div>
            )}
          </section>
        ))}
      </div>
    </div>
  );
}


