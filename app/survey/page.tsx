"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";

interface SurveyFormData {
  real_name: string;
  course: string;
  motivation: string[];
  target_clients: string;
  skills_wanted: string;
  fears: string[];
  wow_result: string;
  practice_model: string;
}

export default function SurveyPage() {
  const router = useRouter();
  const [formData, setFormData] = useState<SurveyFormData>({
    real_name: "",
    course: "",
    motivation: [],
    target_clients: "",
    skills_wanted: "",
    fears: [],
    wow_result: "",
    practice_model: "",
  });
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<{ type: "success" | "error"; message: string } | null>(null);

  const handleCheckboxChange = (field: "motivation" | "fears", value: string) => {
    setFormData((prev) => ({
      ...prev,
      [field]: prev[field].includes(value)
        ? prev[field].filter((v) => v !== value)
        : [...prev[field], value],
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setResult(null);

    try {
      const response = await fetch("/api/survey", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∫–µ—Ç—ã");
      }

      setResult({
        type: "success",
        message: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º...",
      });

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ dashboard —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
      setTimeout(() => {
        router.push(`/dashboard?profileId=${data.profileId}`);
      }, 2000);
    } catch (error) {
      setResult({
        type: "error",
        message: error instanceof Error ? error.message : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-500 to-indigo-600 p-4 md:p-8">
      <div className="max-w-3xl mx-auto bg-white rounded-2xl shadow-2xl p-6 md:p-10">
        <div className="text-center mb-8">
          <h1 className="text-3xl md:text-4xl font-bold text-gray-800 mb-3">
            üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–∞
          </h1>
          <p className="text-gray-600 text-lg">
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="real_name" className="block font-semibold text-gray-700 mb-2">
              –í–∞—à–µ –∏–º—è: <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="real_name"
              required
              value={formData.real_name}
              onChange={(e) => setFormData({ ...formData, real_name: e.target.value })}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞"
              className="w-full px-4 py-3 border-2 border-gray-200 rounded-lg focus:border-purple-500 focus:outline-none transition text-gray-900 placeholder:text-gray-400"
            />
          </div>

          <div>
            <label htmlFor="course" className="block font-semibold text-gray-700 mb-2">
              –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å: <span className="text-red-500">*</span>
            </label>
            <select
              id="course"
              required
              value={formData.course}
              onChange={(e) => setFormData({ ...formData, course: e.target.value })}
              className="w-full px-4 py-3 border-2 border-gray-200 rounded-lg focus:border-purple-500 focus:outline-none transition text-gray-900"
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å</option>
              <option value="massazh-shvz">–ú–∞—Å—Å–∞–∂ –®–í–ó</option>
            </select>
          </div>

          <div>
            <label className="block font-semibold text-gray-700 mb-2">
              –ß—Ç–æ –≤–∞—Å –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∏–∑—É—á–∞—Ç—å –º–∞—Å—Å–∞–∂?
            </label>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {[
                { value: "help_others", label: "–ü–æ–º–æ—á—å –±–ª–∏–∑–∫–∏–º" },
                { value: "professional_development", label: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ" },
                { value: "health_improvement", label: "–£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è" },
                { value: "additional_income", label: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥" },
              ].map(({ value, label }) => (
                <label key={value} className="flex items-center space-x-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={formData.motivation.includes(value)}
                    onChange={() => handleCheckboxChange("motivation", value)}
                    className="w-5 h-5 text-purple-600 rounded focus:ring-purple-500"
                  />
                  <span className="text-gray-700">{label}</span>
                </label>
              ))}
            </div>
          </div>

          <div>
            <label htmlFor="target_clients" className="block font-semibold text-gray-700 mb-2">
              –° –∫–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å?
            </label>
            <textarea
              id="target_clients"
              value={formData.target_clients}
              onChange={(e) => setFormData({ ...formData, target_clients: e.target.value })}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—Ñ–∏—Å–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª–∏—Ç —Å–ø–∏–Ω–∞ –∏ —à–µ—è –æ—Ç –¥–æ–ª–≥–æ–≥–æ —Å–∏–¥–µ–Ω–∏—è –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º"
              rows={3}
              className="w-full px-4 py-3 border-2 border-gray-200 rounded-lg focus:border-purple-500 focus:outline-none transition resize-y text-gray-900 placeholder:text-gray-400"
            />
          </div>

          <div>
            <label htmlFor="skills_wanted" className="block font-semibold text-gray-700 mb-2">
              –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å–≤–æ–∏—Ç—å?
            </label>
            <textarea
              id="skills_wanted"
              value={formData.skills_wanted}
              onChange={(e) => setFormData({ ...formData, skills_wanted: e.target.value })}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—á—É –Ω–∞—É—á–∏—Ç—å—Å—è —Å–Ω–∏–º–∞—Ç—å –≥–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏, —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –∏ –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ —à–µ–∏"
              rows={3}
              className="w-full px-4 py-3 border-2 border-gray-200 rounded-lg focus:border-purple-500 focus:outline-none transition resize-y text-gray-900 placeholder:text-gray-400"
            />
          </div>

          <div>
            <label className="block font-semibold text-gray-700 mb-2">
              –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å —Å—Ç—Ä–∞—Ö–∏ –∏–ª–∏ –æ–ø–∞—Å–µ–Ω–∏—è?
            </label>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {[
                { value: "harm_client", label: "–ù–∞–≤—Ä–µ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É" },
                { value: "wrong_technique", label: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞" },
                { value: "lack_confidence", label: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏" },
                { value: "not_enough_time", label: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏" },
              ].map(({ value, label }) => (
                <label key={value} className="flex items-center space-x-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={formData.fears.includes(value)}
                    onChange={() => handleCheckboxChange("fears", value)}
                    className="w-5 h-5 text-purple-600 rounded focus:ring-purple-500"
                  />
                  <span className="text-gray-700">{label}</span>
                </label>
              ))}
            </div>
          </div>

          <div>
            <label htmlFor="wow_result" className="block font-semibold text-gray-700 mb-2">
              –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–ø–µ—á–∞—Ç–ª–∏—Ç?
            </label>
            <textarea
              id="wow_result"
              value={formData.wow_result}
              onChange={(e) => setFormData({ ...formData, wow_result: e.target.value })}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–≥–¥–∞ —è —Å–º–æ–≥—É –ø–æ–º–æ—á—å –º–∞–º–µ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –≥–æ–ª–æ–≤–Ω—ã—Ö –±–æ–ª–µ–π, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω–∞ —Å—Ç—Ä–∞–¥–∞–µ—Ç –º–Ω–æ–≥–æ –ª–µ—Ç"
              rows={3}
              className="w-full px-4 py-3 border-2 border-gray-200 rounded-lg focus:border-purple-500 focus:outline-none transition resize-y text-gray-900 placeholder:text-gray-400"
            />
          </div>

          <div>
            <label htmlFor="practice_model" className="block font-semibold text-gray-700 mb-2">
              –ù–∞ –∫–æ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è?
            </label>
            <textarea
              id="practice_model"
              value={formData.practice_model}
              onChange={(e) => setFormData({ ...formData, practice_model: e.target.value })}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞ –º—É–∂–µ –∏ –ø–æ–¥—Ä—É–≥–∞—Ö, –∏–Ω–æ–≥–¥–∞ –Ω–∞ —Å–µ–±–µ"
              rows={2}
              className="w-full px-4 py-3 border-2 border-gray-200 rounded-lg focus:border-purple-500 focus:outline-none transition resize-y text-gray-900 placeholder:text-gray-400"
            />
          </div>

          <button
            type="submit"
            disabled={loading}
            className="w-full bg-gradient-to-r from-purple-500 to-indigo-600 text-white py-4 rounded-full font-semibold text-lg hover:shadow-lg transition disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? "–°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—É—Ä—Å..." : "üéØ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—É—Ä—Å"}
          </button>

          {result && (
            <div
              className={`p-4 rounded-lg text-center ${
                result.type === "success"
                  ? "bg-green-50 text-green-800 border border-green-200"
                  : "bg-red-50 text-red-800 border border-red-200"
              }`}
            >
              {result.message}
            </div>
          )}
        </form>
      </div>
    </div>
  );
}

