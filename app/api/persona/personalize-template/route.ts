import { NextRequest, NextResponse } from "next/server";
import { createSupabaseServerClient } from "@/lib/supabase/server";
import OpenAI from "openai";
import fs from "fs";
import path from "path";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface PersonalizeRequest {
  user_id: string;
  lesson_number: number;
  flush?: boolean;
}

/**
 * POST /api/persona/personalize-template
 * –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —É—Ä–æ–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function POST(request: NextRequest) {
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type',
  };

  try {
    const body: PersonalizeRequest = await request.json();
    const { user_id, lesson_number, flush } = body;

    if (!user_id || !lesson_number) {
      return NextResponse.json(
        { ok: false, error: "user_id and lesson_number are required" },
        { status: 400, headers: corsHeaders }
      );
    }

    const supabase = createSupabaseServerClient();

    // 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: profile } = await supabase
      .from("profiles")
      .select("id, name, survey")
      .eq("user_identifier", user_id)
      .maybeSingle();

    if (!profile) {
      return NextResponse.json({
        ok: true,
        html: `
          <div class="persona-block">
            <div class="persona-alert">
              <h3>üí° –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</h3>
              <p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞.</p>
              <a href="/survey/iframe?uid=${user_id}" class="persona-btn" target="_blank">
                –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É ‚Üí
              </a>
            </div>
          </div>
        `,
      }, { headers: corsHeaders });
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫ –ø–æ –Ω–æ–º–µ—Ä—É
    const { data: lesson } = await supabase
      .from("lessons")
      .select("id, title, lesson_number")
      .eq("lesson_number", lesson_number)
      .maybeSingle();

    if (!lesson) {
      return NextResponse.json({
        ok: true,
        html: `
          <div class="persona-block">
            <div class="persona-alert persona-warning">
              <p>–£—Ä–æ–∫ ${lesson_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</p>
            </div>
          </div>
        `,
      }, { headers: corsHeaders });
    }

    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω —É—Ä–æ–∫–∞
    const templatePath = path.join(process.cwd(), 'store', 'shvz', `${lesson_number}-${lesson_number}-${getLessonId(lesson_number)}-final.json`);
    
    if (!fs.existsSync(templatePath)) {
      return NextResponse.json({
        ok: true,
        html: `
          <div class="persona-block">
            <div class="persona-alert persona-warning">
              <p>–®–∞–±–ª–æ–Ω –¥–ª—è —É—Ä–æ–∫–∞ ${lesson_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.</p>
            </div>
          </div>
        `,
      }, { headers: corsHeaders });
    }

    const template = JSON.parse(fs.readFileSync(templatePath, 'utf8'));

    // 4. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
    const personalizedContent = await personalizeTemplate(template, profile.survey, profile.name);

    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
    const { error: saveError } = await supabase
      .from("personalized_lesson_descriptions")
      .upsert({
        profile_id: profile.id,
        lesson_id: lesson.id,
        content: personalizedContent,
      });

    if (saveError) {
      console.error("Error saving personalization:", saveError);
    }

    // 6. –§–æ—Ä–º–∏—Ä—É–µ–º HTML
    const html = formatPersonalizedContent(personalizedContent);

    return NextResponse.json({
      ok: true,
      html: html,
      cached: !flush,
    }, { headers: corsHeaders });

  } catch (error) {
    console.error("Error in POST /api/persona/personalize-template:", error);
    return NextResponse.json(
      { ok: false, error: "Internal server error" },
      { status: 500, headers: corsHeaders }
    );
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç ID —É—Ä–æ–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞
 */
function getLessonId(lessonNumber: number): string {
  const lessonIds: Record<number, string> = {
    1: "1-f9b62dc5-9b76-491d-8b9b-2b72411df740",
    2: "c8a90762-6fca-47a8-80c3-5f454ae05273",
    3: "1c75e3db-9afd-4237-8b8f-16be2b00ae0c",
    4: "61b19549-d1bf-4265-bb1e-ff21ae7891a0",
    5: "5-387be494-dcf4-41a0-83c2-380fdd4f4cc1",
    6: "6-913d5be1-bbfb-4d32-b4d2-157d10551389",
    7: "7-e0f961c1-b8e3-4f57-939d-fb188d2703a9",
    8: "722e1278-2dcf-4e76-baa3-8d674f3abda4",
    9: "56766339-03e0-4c1b-9d99-cc49590ad3fd",
    10: "10-69b9560e-2af2-4690-af44-1398ace0f75e",
    11: "11-8227a790-17ef-489a-8538-afbe2c4c10ce",
    12: "12-26ef3e23-3d2e-4461-80bf-622f26737528",
  };
  
  return lessonIds[lessonNumber] || "";
}

/**
 * –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function personalizeTemplate(template: any, survey: any, userName: string): Promise<Record<string, unknown>> {
  const prompt = `–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Å—Å–∞–∂–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –§–æ–º–∏–Ω–∞. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω —É—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∫–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞.

–®–ê–ë–õ–û–ù –£–†–û–ö–ê:
${JSON.stringify(template, null, 2)}

–ê–ù–ö–ï–¢–ê –°–¢–£–î–ï–ù–¢–ê:
- –ò–º—è: ${userName}
- –ú–æ—Ç–∏–≤–∞—Ü–∏—è: ${survey.motivation?.join(", ") || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
- –¶–µ–ª–µ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: ${survey.target_clients || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
- –ñ–µ–ª–∞–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: ${survey.skills_wanted || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
- –°—Ç—Ä–∞—Ö–∏/–æ–ø–∞—Å–µ–Ω–∏—è: ${survey.fears?.join(", ") || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
- –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${survey.wow_result || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
- –ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏: ${survey.practice_model || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}

–ó–ê–î–ê–ù–ò–ï:
–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —à–∞–±–ª–æ–Ω–∞, —É—á–∏—Ç—ã–≤–∞—è:
1. –û–±—Ä–∞—â–∞–π—Å—è –∫ —Å—Ç—É–¥–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏
2. –£—á–∏—Ç—ã–≤–∞–π –µ–≥–æ –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ —Ü–µ–ª–∏
3. –ê–¥—Ä–µ—Å—É–π –µ–≥–æ —Å—Ç—Ä–∞—Ö–∏ –∏ –æ–ø–∞—Å–µ–Ω–∏—è
4. –ê–¥–∞–ø—Ç–∏—Ä—É–π –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥ –µ–≥–æ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏
5. –°–≤—è–∑—ã–≤–∞–π —Å –µ–≥–æ –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (JSON):
{
  "summary_short": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
  "why_watch": "–ó–∞—á–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–∫ —Å —É—á–µ—Ç–æ–º –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞",
  "quick_action": "–ë—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —É—á–µ—Ç–æ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏",
  "social_share": "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π",
  "homework_20m": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ 20 –º–∏–Ω—É—Ç"
}

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Å—Å–∞–∂–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —É—Ä–æ–∫–æ–≤. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.",
        },
        {
          role: "user",
          content: prompt,
        },
      ],
      temperature: 0.7,
      max_tokens: 1000,
    });

    const content = completion.choices[0]?.message?.content || "{}";
    return JSON.parse(content);
  } catch (error) {
    console.error("OpenAI API error:", error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return template;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ HTML
 */
function formatPersonalizedContent(content: any): string {
  return `
    <div class="persona-block">
      ${content.summary_short ? `
        <div class="persona-section">
          <h3 class="persona-section-title">üìù –û —É—Ä–æ–∫–µ</h3>
          <p class="persona-text">${content.summary_short}</p>
        </div>
      ` : ''}

      ${content.prev_lessons ? `
        <div class="persona-section">
          <h3 class="persona-section-title">üìö –ß—Ç–æ –º—ã –∏–∑—É—á–∏–ª–∏</h3>
          <p class="persona-text">${content.prev_lessons}</p>
        </div>
      ` : ''}

      ${content.why_watch ? `
        <div class="persona-section">
          <h3 class="persona-section-title">üéØ –ó–∞—á–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å</h3>
          <p class="persona-text">${content.why_watch}</p>
        </div>
      ` : ''}

      ${content.quick_action ? `
        <div class="persona-section">
          <h3 class="persona-section-title">‚ö° –ë—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ</h3>
          <p class="persona-text">${content.quick_action}</p>
        </div>
      ` : ''}

      ${content.homework_20m ? `
        <div class="persona-section persona-homework">
          <h3 class="persona-section-title">üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (20 –º–∏–Ω)</h3>
          <p class="persona-text">${content.homework_20m}</p>
        </div>
      ` : ''}

      ${content.social_share ? `
        <div class="persona-section persona-social">
          <h3 class="persona-section-title">üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è</h3>
          <p class="persona-text">${content.social_share}</p>
        </div>
      ` : ''}
    </div>
  `;
}

export async function OPTIONS() {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  });
}
