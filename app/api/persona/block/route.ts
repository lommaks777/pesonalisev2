import { NextRequest, NextResponse } from "next/server";
import { createSupabaseServerClient } from "@/lib/supabase/server";

interface BlockRequest {
  user_id: string;
  lesson: string; // lesson slug
  title: string;
  flush?: boolean; // –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à
}

/**
 * POST /api/persona/block
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –±–ª–æ–∫ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–∞
 */
export async function POST(request: NextRequest) {
  try {
    const body: BlockRequest = await request.json();
    const { user_id, lesson, title, flush } = body;

    if (!user_id || !lesson) {
      return NextResponse.json(
        { ok: false, error: "user_id and lesson are required" },
        { status: 400 }
      );
    }

    const supabase = createSupabaseServerClient();

    // 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_identifier
    const { data: profile } = await supabase
      .from("profiles")
      .select("id, name")
      .eq("user_identifier", user_id)
      .maybeSingle();

    if (!profile) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      return NextResponse.json({
        ok: true,
        html: `
          <div class="persona-block">
            <div class="persona-alert">
              <h3>üí° –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</h3>
              <p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞.</p>
              <a href="/survey/iframe?uid=${user_id}" class="persona-btn" target="_blank">
                –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É ‚Üí
              </a>
            </div>
          </div>
        `,
      });
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫ –ø–æ slug (–∏—â–µ–º –≤ title –∏–ª–∏ –¥—Ä—É–≥–æ–º –ø–æ–ª–µ)
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è
    const { data: lessonData } = await supabase
      .from("lessons")
      .select("id, title, lesson_number")
      .ilike("title", `%${lesson}%`)
      .limit(1)
      .maybeSingle();

    if (!lessonData) {
      return NextResponse.json({
        ok: true,
        html: `
          <div class="persona-block">
            <div class="persona-alert persona-warning">
              <p>–£—Ä–æ–∫ "${title}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</p>
            </div>
          </div>
        `,
      });
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
    const { data: personalization } = await supabase
      .from("personalized_lesson_descriptions")
      .select("content")
      .eq("profile_id", profile.id)
      .eq("lesson_id", lessonData.id)
      .maybeSingle();

    if (!personalization || !personalization.content) {
      return NextResponse.json({
        ok: true,
        html: `
          <div class="persona-block">
            <div class="persona-alert">
              <h3>üìù –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ</h3>
              <p>–î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</p>
            </div>
          </div>
        `,
      });
    }

    // 4. –§–æ—Ä–º–∏—Ä—É–µ–º HTML –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    const content = personalization.content as Record<string, unknown>;
    const introduction = content.introduction as string || "";
    const keyPoints = (content.key_points as string[]) || [];
    const practicalTips = (content.practical_tips as string[]) || [];
    const motivation = content.motivation as string || "";
    const homework = content.homework as string || "";

    const html = `
      <div class="persona-block">
        <div class="persona-header">
          <h2 class="persona-title">üéØ ${title}</h2>
          <span class="persona-badge">–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è ${profile.name}</span>
        </div>

        ${introduction ? `
          <div class="persona-section">
            <h3 class="persona-section-title">üëã –í–≤–µ–¥–µ–Ω–∏–µ</h3>
            <p class="persona-text">${introduction}</p>
          </div>
        ` : ''}

        ${keyPoints.length > 0 ? `
          <div class="persona-section">
            <h3 class="persona-section-title">üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã</h3>
            <ul class="persona-list">
              ${keyPoints.map(point => `<li>${point}</li>`).join('')}
            </ul>
          </div>
        ` : ''}

        ${practicalTips.length > 0 ? `
          <div class="persona-section">
            <h3 class="persona-section-title">üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã</h3>
            <ul class="persona-list">
              ${practicalTips.map(tip => `<li>${tip}</li>`).join('')}
            </ul>
          </div>
        ` : ''}

        ${motivation ? `
          <div class="persona-section persona-motivation">
            <p class="persona-text">${motivation}</p>
          </div>
        ` : ''}

        ${homework ? `
          <div class="persona-section persona-homework">
            <h3 class="persona-section-title">üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</h3>
            <p class="persona-text">${homework}</p>
          </div>
        ` : ''}
      </div>
    `;

    return NextResponse.json({
      ok: true,
      html: html,
      cached: !flush,
    });

  } catch (error) {
    console.error("Error in POST /api/persona/block:", error);
    return NextResponse.json(
      { ok: false, error: "Internal server error" },
      { status: 500 }
    );
  }
}

