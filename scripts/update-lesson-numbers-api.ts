import "dotenv/config";
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl) {
  console.error('‚ùå NEXT_PUBLIC_SUPABASE_URL –Ω–µ –∑–∞–¥–∞–Ω');
  process.exit(1);
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º anon key –µ—Å–ª–∏ service key –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
const supabaseKey = supabaseServiceKey || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY –∏–ª–∏ NEXT_PUBLIC_SUPABASE_ANON_KEY –Ω–µ –∑–∞–¥–∞–Ω');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function updateLessonNumbers() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —É—Ä–æ–∫–æ–≤...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data: lessons, error: fetchError } = await supabase
      .from('lessons')
      .select('id, lesson_number, title')
      .order('lesson_number', { ascending: true });

    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤:', fetchError.message);
      return;
    }

    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${lessons?.length || 0} —É—Ä–æ–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–æ–≤
    for (const lesson of lessons || []) {
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —É—Ä–æ–∫–∞
      const lessonDir = path.join(process.cwd(), 'store', 'shvz', 'lessons');
      const lessonFiles = fs.readdirSync(lessonDir, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory())
        .map(dirent => dirent.name)
        .sort();

      let newNumber: number | null = null;
      let lessonFile: string | null = null;

      // –ò—â–µ–º —Ñ–∞–π–ª —É—Ä–æ–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
      for (const dir of lessonFiles) {
        const lessonPath = path.join(lessonDir, dir, 'lesson.json');
        if (fs.existsSync(lessonPath)) {
          try {
            const lessonData = JSON.parse(fs.readFileSync(lessonPath, 'utf8'));
            if (lessonData.title === lesson.title) {
              newNumber = lessonData.number;
              lessonFile = dir;
              break;
            }
          } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${lessonPath}:`, error);
          }
        }
      }

      if (newNumber && newNumber !== lesson.lesson_number) {
        console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫ "${lesson.title}": ${lesson.lesson_number} ‚Üí ${newNumber}`);
        
        const { error: updateError } = await supabase
          .from('lessons')
          .update({ lesson_number: newNumber })
          .eq('id', lesson.id);

        if (updateError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞ "${lesson.title}":`, updateError.message);
        } else {
          console.log(`‚úÖ –£—Ä–æ–∫ "${lesson.title}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: ${lesson.lesson_number} ‚Üí ${newNumber}`);
        }
      } else if (newNumber === lesson.lesson_number) {
        console.log(`‚úì –£—Ä–æ–∫ "${lesson.title}" —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: ${lesson.lesson_number}`);
      } else {
        console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è —É—Ä–æ–∫–∞ "${lesson.title}" (–Ω–æ–º–µ—Ä ${lesson.lesson_number})`);
      }
    }

    console.log('üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —É—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
updateLessonNumbers().catch(console.error);
