import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkProgress() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
    const { data: course, error: courseError } = await supabase
      .from('courses')
      .select('id, title, slug')
      .eq('slug', 'taping-basics')
      .single();
    
    if (courseError || !course) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞:', courseError?.message);
      return;
    }
    
    console.log('üìö –ö—É—Ä—Å:', course.title);
    console.log('üîó Slug:', course.slug);
    console.log('');
    
    // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏
    const { data: lessons, count, error: lessonsError } = await supabase
      .from('lessons')
      .select('lesson_number, title, content', { count: 'exact' })
      .eq('course_id', course.id)
      .order('lesson_number');
    
    if (lessonsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤:', lessonsError.message);
      return;
    }
    
    console.log('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log('  –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤ –≤ –±–∞–∑–µ:', count);
    
    const withTranscripts = lessons?.filter(l => l.content?.transcript).length || 0;
    console.log('  –° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏:', withTranscripts);
    console.log('  –ë–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤:', (count || 0) - withTranscripts);
    const percent = count ? Math.round(withTranscripts / count * 100) : 0;
    console.log('  –ü—Ä–æ–≥—Ä–µ—Å—Å:', withTranscripts + '/' + count + ' (' + percent + '%)');
    console.log('');
    
    if (lessons && lessons.length > 0) {
      console.log('üìù –î–µ—Ç–∞–ª–∏ –ø–æ —É—Ä–æ–∫–∞–º:');
      lessons.forEach(lesson => {
        const hasTranscript = lesson.content?.transcript ? '‚úÖ' : '‚ùå';
        const transcriptLength = lesson.content?.transcript?.length || 0;
        const title = lesson.title.length > 45 ? lesson.title.substring(0, 45) + '...' : lesson.title;
        const lessonNum = String(lesson.lesson_number).padStart(2, '0');
        console.log('  ' + hasTranscript + ' –£—Ä–æ–∫ ' + lessonNum + ': ' + title + ' (' + transcriptLength + ' —Å–∏–º–≤.)');
      });
    }
    
    console.log('');
    console.log('‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', new Date().toLocaleTimeString('ru-RU'));
    
  } catch (error: any) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error?.message || error);
  }
}

checkProgress().catch(console.error);
