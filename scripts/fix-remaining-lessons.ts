import "dotenv/config";
import { createClient } from '@supabase/supabase-js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl) {
  console.error('‚ùå NEXT_PUBLIC_SUPABASE_URL –Ω–µ –∑–∞–¥–∞–Ω');
  process.exit(1);
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º anon key –µ—Å–ª–∏ service key –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
const supabaseKey = supabaseServiceKey || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY –∏–ª–∏ NEXT_PUBLIC_SUPABASE_ANON_KEY –Ω–µ –∑–∞–¥–∞–Ω');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function fixRemainingLessons() {
  console.log('üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —É—Ä–æ–∫–∏...');

  try {
    // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —É—Ä–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    const lessonMappings = [
      { title: "1 –£—Ä–æ–∫ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è", newNumber: 5 },
      { title: "1 –£—Ä–æ–∫ –≤–≤–µ–¥–µ–Ω–∏–µ.", newNumber: 1 },
      { title: "1 —É—Ä–æ–∫ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ –∑–∞ –º–Ω–æ–π", newNumber: 6 }
    ];

    for (const mapping of lessonMappings) {
      console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º "${mapping.title}": ‚Üí ${mapping.newNumber}`);
      
      const { error: updateError } = await supabase
        .from('lessons')
        .update({ lesson_number: mapping.newNumber })
        .eq('title', mapping.title);

      if (updateError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ "${mapping.title}":`, updateError.message);
      } else {
        console.log(`‚úÖ –£—Ä–æ–∫ "${mapping.title}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: ‚Üí ${mapping.newNumber}`);
      }
    }

    console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìö –§–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–æ–≤:');
    const { data: lessons, error: fetchError } = await supabase
      .from('lessons')
      .select('lesson_number, title')
      .order('lesson_number', { ascending: true });

    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤:', fetchError.message);
      return;
    }

    lessons?.forEach(lesson => {
      console.log(`${lesson.lesson_number}: ${lesson.title}`);
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixRemainingLessons().catch(console.error);
