#!/usr/bin/env node
/**
 * Import user profile from JSON file to Supabase database
 * Usage: npx tsx --env-file=.env.local scripts/import-profile-from-json.ts <userId>
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs/promises';
import path from 'path';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

interface SurveyData {
  experience?: string;
  motivation?: string[];
  motivation_other?: string;
  target_clients?: string;
  skills_wanted?: string;
  fears?: string[];
  fears_other?: string;
  wow_result?: string;
  practice_model?: string;
}

interface UserProfile {
  user_id: string;
  name: string;
  lvl?: string | null;
  goal?: string | null;
  time?: string | null;
  format?: string | null;
  purpose?: string | null;
  survey: SurveyData;
  updated_at?: number;
}

async function importProfile(userId: string) {
  console.log(`üîç –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...\n`);

  // 1. Read JSON file
  const jsonPath = path.join(process.cwd(), 'store', `${userId}.json`);
  
  let profileData: UserProfile;
  try {
    const content = await fs.readFile(jsonPath, 'utf-8');
    profileData = JSON.parse(content) as UserProfile;
    console.log(`‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${jsonPath}`);
    console.log(`   –ò–º—è: ${profileData.name}`);
    console.log(`   –ú–æ—Ç–∏–≤–∞—Ü–∏—è: ${profileData.survey.motivation?.join(', ')}`);
    console.log(`   –¶–µ–ª–µ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: ${profileData.survey.target_clients}\n`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${jsonPath}:`, error);
    console.error(`   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /store/\n`);
    process.exit(1);
  }

  // 2. Check if profile already exists
  const { data: existingProfile, error: checkError } = await supabase
    .from('profiles')
    .select('id, name')
    .eq('user_identifier', userId)
    .maybeSingle();

  if (checkError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ë–î:', checkError);
    process.exit(1);
  }

  if (existingProfile) {
    console.log(`‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`);
    console.log(`   ID: ${existingProfile.id}`);
    console.log(`   –ò–º—è: ${existingProfile.name}`);
    console.log(`\n‚ùì –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å? (–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å —Ñ–ª–∞–≥–æ–º --force)\n`);
    
    if (!process.argv.includes('--force')) {
      process.exit(0);
    }
    
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å...\n');
  }

  // 3. Prepare survey data (use existing survey object)
  const surveyData = profileData.survey;

  // 4. Insert or update profile
  const { data: profile, error: upsertError } = await supabase
    .from('profiles')
    .upsert(
      {
        user_identifier: userId,
        name: profileData.name,
        course_slug: 'kinesio2', // Default course for kinesio users
        survey: surveyData,
      },
      { 
        onConflict: 'user_identifier',
        ignoreDuplicates: false 
      }
    )
    .select()
    .single();

  if (upsertError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', upsertError);
    process.exit(1);
  }

  console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!');
  console.log(`   ID: ${profile.id}`);
  console.log(`   –ò–º—è: ${profile.name}`);
  console.log(`   User Identifier: ${profile.user_identifier}`);
  console.log(`   –ö—É—Ä—Å: ${profile.course_slug}`);
  console.log(`\nüìä –î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:`);
  console.log(`   –ú–æ—Ç–∏–≤–∞—Ü–∏—è: ${surveyData.motivation?.join(', ')}`);
  console.log(`   –¶–µ–ª–µ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: ${surveyData.target_clients}`);
  console.log(`   –ñ–µ–ª–∞–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: ${surveyData.skills_wanted}`);
  console.log(`   –°—Ç—Ä–∞—Ö–∏: ${surveyData.fears?.join(', ') || surveyData.fears_other || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}`);
  console.log(`   WOW-—Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${surveyData.wow_result}`);
  console.log(`   –ú–æ–¥–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏: ${surveyData.practice_model}`);
  console.log(`\n‚ú® –¢–µ–ø–µ—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è!`);
}

async function main() {
  const userId = process.argv[2];
  
  if (!userId) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    console.error('   npx tsx --env-file=.env.local scripts/import-profile-from-json.ts <userId>');
    console.error('\n–ü—Ä–∏–º–µ—Ä:');
    console.error('   npx tsx --env-file=.env.local scripts/import-profile-from-json.ts 21179358');
    console.error('\n–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–±–∞–≤—å—Ç–µ --force:');
    console.error('   npx tsx --env-file=.env.local scripts/import-profile-from-json.ts 21179358 --force');
    process.exit(1);
  }

  await importProfile(userId);
}

main();
