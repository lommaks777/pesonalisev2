/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ *-final.json —Ñ–∞–π–ª–æ–≤ –≤ lesson.json
 */

import * as fs from 'fs/promises';
import * as path from 'path';

async function loadTemplates() {
  console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –≤ lesson.json —Ñ–∞–π–ª—ã...\n');
  
  const shvzDir = path.join(process.cwd(), 'store', 'shvz');
  const lessonsDir = path.join(shvzDir, 'lessons');
  
  // –ù–∞–π—Ç–∏ –≤—Å–µ *-final.json —Ñ–∞–π–ª—ã
  const files = await fs.readdir(shvzDir);
  const templateFiles = files.filter(f => f.match(/^\d+-.*-final\.json$/));
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤: ${templateFiles.length}\n`);
  
  // –°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —É—Ä–æ–∫–æ–≤
  const templatesByLesson = new Map<number, any>();
  
  for (const file of templateFiles) {
    const match = file.match(/^(\d+)-/);
    if (match) {
      const lessonNum = parseInt(match[1]);
      const filePath = path.join(shvzDir, file);
      const content = await fs.readFile(filePath, 'utf-8');
      const template = JSON.parse(content);
      
      templatesByLesson.set(lessonNum, template);
      console.log(`  ${lessonNum}. ${file}`);
    }
  }
  
  console.log('');
  
  // –û–±–Ω–æ–≤–∏—Ç—å lesson.json —Ñ–∞–π–ª—ã
  const folders = await fs.readdir(lessonsDir);
  const sortedFolders = folders.filter(f => /^\d+$/.test(f)).sort();
  
  let updated = 0;
  let skipped = 0;
  
  for (const folder of sortedFolders) {
    const lessonJsonPath = path.join(lessonsDir, folder, 'lesson.json');
    const content = await fs.readFile(lessonJsonPath, 'utf-8');
    const lesson = JSON.parse(content);
    
    const lessonNum = lesson.number;
    const template = templatesByLesson.get(lessonNum);
    
    if (template) {
      // –û–±–Ω–æ–≤–∏—Ç—å lesson.json
      lesson.description = { template };
      lesson.files = lesson.files || [];
      
      await fs.writeFile(lessonJsonPath, JSON.stringify(lesson, null, 4), 'utf-8');
      
      console.log(`‚úÖ –£—Ä–æ–∫ ${lessonNum} (–ø–∞–ø–∫–∞ ${folder}): —à–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω`);
      updated++;
    } else {
      console.log(`‚ö†Ô∏è –£—Ä–æ–∫ ${lessonNum} (–ø–∞–ø–∫–∞ ${folder}): —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      skipped++;
    }
  }
  
  console.log('');
  console.log('‚ïê'.repeat(60));
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Ä–æ–∫–æ–≤: ${updated}`);
  console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —É—Ä–æ–∫–æ–≤: ${skipped}`);
  console.log('‚ïê'.repeat(60));
  console.log('');
  
  if (updated > 0) {
    console.log('üí° –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
    console.log('   npx tsx --env-file=.env.local scripts/import-lessons.ts');
    console.log('');
    console.log('   –≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏.');
  }
}

loadTemplates().catch(console.error);
