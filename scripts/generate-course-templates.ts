#!/usr/bin/env tsx
/**
 * Generate Lesson Templates from Transcripts
 * 
 * Creates base lesson templates ("fish") from transcripts stored in database.
 * These templates are shown to users who haven't filled out the survey.
 * 
 * Usage:
 *   npx tsx --env-file=.env.local scripts/generate-course-templates.ts \
 *     --course-slug=taping-basics \
 *     [--start-lesson=1] \
 *     [--end-lesson=5]
 */

import 'dotenv/config';
import OpenAI from 'openai';
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/lib/supabase/types';
import fs from 'fs';
import path from 'path';

interface GenerateOptions {
  courseSlug: string;
  startLesson?: number;
  endLesson?: number;
}

interface LessonTemplate {
  'üëã –í–≤–µ–¥–µ–Ω–∏–µ': string;
  'üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã': string[];
  'üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã': string[];
  '‚ö†Ô∏è –í–∞–∂–Ω–æ'?: string[];
  'üß∞ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞'?: string;
  'üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ': string;
  '_–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞_': string;
}

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * Generate lesson template from transcript using OpenAI
 */
async function generateLessonTemplate(
  lessonNumber: number,
  lessonTitle: string,
  transcript: string
): Promise<LessonTemplate | null> {
  const prompt = `–¢—ã –º–µ—Ç–æ–¥–∏—Å—Ç –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤. 
–ó–∞–¥–∞—á–∞: –∏–∑ ¬´—Å—ã—Ä–æ–π¬ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —É—Ä–æ–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É-—Ä–µ–∑—é–º–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. 
–†–∞–±–æ—Ç–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–∞–∫—Ç–∞–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –£–†–û–ö–ï:
- –ù–æ–º–µ—Ä: ${lessonNumber}
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${lessonTitle}

–¢–†–ê–ù–°–ö–†–ò–ü–¢ –£–†–û–ö–ê:
${transcript}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –í–´–•–û–î–£ (—á–∏—Å—Ç—ã–π Markdown, –±–µ–∑ –ø—Ä–µ–∞–º–±—É–ª, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π):
1) üëã **–í–≤–µ–¥–µ–Ω–∏–µ**  
   2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. 
   –£–∫–∞–∂–∏ —Ü–µ–ª—å —É—Ä–æ–∫–∞ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

2) üîë **–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã**  
   4‚Äì6 –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π ‚â§ 18 —Å–ª–æ–≤. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –∫–∞–∫ ¬´—á—Ç–æ —É–∑–Ω–∞–µ—Ç–µ/–Ω–∞—É—á–∏—Ç–µ—Å—å/–ø–æ–π–º—ë—Ç–µ¬ª. 
   –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞—Ö, –∑–æ–Ω–∞—Ö —Ä–∞–±–æ—Ç—ã, –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∞–¥–∞–ø—Ç–∞—Ü–∏—è—Ö –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞/–∞—É–¥–∏—Ç–æ—Ä–∏—é.

3) üí° **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã**  
   3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –∫–∞–∂–¥—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≥–ª–∞–≥–æ–ª–∞ (¬´–î–µ–ª–∞–π—Ç–µ‚Ä¶¬ª, ¬´–ò–∑–±–µ–≥–∞–π—Ç–µ‚Ä¶¬ª, ¬´–°–ª–µ–¥–∏—Ç–µ‚Ä¶¬ª). 
   –í–∫–ª—é—á–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å –∫–ª–∏–µ–Ω—Ç–æ–º, –∫–æ–Ω—Ç—Ä–æ–ª—å –±–æ–ª–∏/–¥–∞–≤–ª–µ–Ω–∏—è, —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å.

4) ‚ö†Ô∏è **–í–∞–∂–Ω–æ** *(—Ä–∞–∑–¥–µ–ª –¥–æ–±–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–æ –µ—Å—Ç—å –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ)*  
   2‚Äì4 –ø—É–Ω–∫—Ç–∞ –ø—Ä–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –º–µ—Ä—É –¥–∞–≤–ª–µ–Ω–∏—è/–≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ ¬´–Ω–µ –¥–µ–ª–∞—Ç—å¬ª.

5) üß∞ **–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞** *(–¥–æ–±–∞–≤–ª—è–π, –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è)*  
   –ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫: —Å—Ç–æ–ª/—Å—Ç—É–ª, –º–∞—Å–ª–æ/–∫—Ä–µ–º, –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ, —Ç–∞–π–º–∏–Ω–≥, –ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏.

6) üìö **–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ**  
   1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º (—á—Ç–æ —Å–¥–µ–ª–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑/–≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å/–∑–∞–º–µ—Ä–∏—Ç—å).

7) _(–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)_  
   1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∏–≤–æ–º, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É, –±–µ–∑ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–≥–æ –ø–∞—Ñ–æ—Å–∞.

–°–¢–ò–õ–¨ –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
- –Ø—Å–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ (—É—Ä–æ–≤–µ–Ω—å —á—Ç–µ–Ω–∏—è B1‚ÄìB2).
- –¢–µ—Ä–º–∏–Ω—ã –ø–æ—è—Å–Ω—è–π –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É.
- –£–±–∏—Ä–∞–π –ø–æ–≤—Ç–æ—Ä—ã, –ø–∞—Ä–∞–∑–∏—Ç–Ω—ã–µ —Å–ª–æ–≤–∞, –æ–≥–æ–≤–æ—Ä–∫–∏.
- –ß–∏—Å–ª–∞ –∏ –¥–æ–∑–∏—Ä–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏, –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ ¬´–ª–∏—à–Ω–∏–µ¬ª —ç–º–æ–¥–∑–∏; –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —Ç–æ–ª—å–∫–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö.
- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∫–æ–≥–æ-—Ç–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–ø—É—Å—Ç–∏ –µ–≥–æ.

–ñ–Å–°–¢–ö–ò–ï –ó–ê–ü–†–ï–¢–´:
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã –±–µ–∑ —Ñ–∞–∫—Ç–∞ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π —Ç–µ—Ö–Ω–∏–∫–∏, –∑–æ–Ω—ã, —ç—Ñ—Ñ–µ–∫—Ç—ã, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ.
- –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è–º–æ —Å–ª–µ–¥—É—é—Ç –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (JSON —Å emoji-–∫–ª—é—á–∞–º–∏):
{
  "üëã –í–≤–µ–¥–µ–Ω–∏–µ": "2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: —Ü–µ–ª—å —É—Ä–æ–∫–∞ –∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
  "üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã": ["–ø—É–Ω–∫—Ç 1 (‚â§18 —Å–ª–æ–≤)", "–ø—É–Ω–∫—Ç 2", "–ø—É–Ω–∫—Ç 3", "–ø—É–Ω–∫—Ç 4"],
  "üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã": ["—Å–æ–≤–µ—Ç 1 (—Å –≥–ª–∞–≥–æ–ª–∞)", "—Å–æ–≤–µ—Ç 2", "—Å–æ–≤–µ—Ç 3"],
  "‚ö†Ô∏è –í–∞–∂–Ω–æ": ["–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ 1", "–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ 2"],
  "üß∞ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞": "—Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ —Ç–∞–π–º–∏–Ω–≥",
  "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ": "1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏–∑–º–µ—Ä–∏–º—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º",
  "_–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞_": "1 –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –ø–∞—Ñ–æ—Å–∞"
}

–í–ê–ñ–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–û —Ç–∞–∫–∏–µ –∫–ª—é—á–∏ —Å emoji, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –≤—ã—à–µ
- key_points –∏ practical_tips –î–û–õ–ñ–ù–´ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–∞–º–∏ —Å—Ç—Ä–æ–∫
- –ù–µ –≤–∫–ª—é—á–∞–π –ø–æ–ª—è "‚ö†Ô∏è –í–∞–∂–Ω–æ" –∏ "üß∞ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å" –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ
- –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –≤ "üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã" –Ω–µ –±–æ–ª–µ–µ 18 —Å–ª–æ–≤
- –ö–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç –≤ "üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã" –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≥–ª–∞–≥–æ–ª–∞

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

  try {
    console.log(`   ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é GPT-4o...`);
    
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: '–¢—ã - –º–µ—Ç–æ–¥–∏—Å—Ç –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤. –°–æ–∑–¥–∞–µ—à—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤. –†–∞–±–æ—Ç–∞–µ—à—å —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–∞–∫—Ç–∞–º, –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–µ—à—å.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 2000
    });

    const response = completion.choices[0]?.message?.content;
    if (!response) {
      console.error(`   ‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI`);
      return null;
    }

    // Clean markdown code blocks
    let cleanResponse = response.trim();
    if (cleanResponse.startsWith('```json')) {
      cleanResponse = cleanResponse.replace(/^```json\s*/, '').replace(/\s*```$/, '');
    }
    if (cleanResponse.startsWith('```')) {
      cleanResponse = cleanResponse.replace(/^```\s*/, '').replace(/\s*```$/, '');
    }

    // Parse JSON
    try {
      const template = JSON.parse(cleanResponse) as LessonTemplate;
      console.log(`   ‚úÖ –®–∞–±–ª–æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
      return template;
    } catch (parseError) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:`, parseError);
      console.log('   –û—Ç–≤–µ—Ç –æ—Ç OpenAI:', cleanResponse.substring(0, 200) + '...');
      return null;
    }

  } catch (error: any) {
    console.error(`   ‚ùå –û—à–∏–±–∫–∞ OpenAI:`, error.message);
    return null;
  }
}

/**
 * Main generation function
 */
async function generateCourseTemplates(options: GenerateOptions): Promise<void> {
  console.log('\n' + '='.repeat(70));
  console.log('üìù –ì–ï–ù–ï–†–ê–¶–ò–Ø –®–ê–ë–õ–û–ù–û–í –£–†–û–ö–û–í');
  console.log('='.repeat(70));
  console.log(`–ö—É—Ä—Å: ${options.courseSlug}`);
  if (options.startLesson || options.endLesson) {
    console.log(`–î–∏–∞–ø–∞–∑–æ–Ω: ${options.startLesson || 1} - ${options.endLesson || '–∫–æ–Ω–µ—Ü'}`);
  }
  console.log('='.repeat(70) + '\n');

  // Initialize Supabase
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY ?? process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
  
  if (!supabaseUrl || !supabaseKey) {
    throw new Error('Supabase credentials not found');
  }
  
  const supabase = createClient<Database>(supabaseUrl, supabaseKey, {
    auth: { persistSession: false }
  });

  // Get course
  console.log('üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ...\n');
  const { data: course, error: courseError } = await supabase
    .from('courses')
    .select('id, title')
    .eq('slug', options.courseSlug)
    .single();

  if (courseError || !course) {
    throw new Error(`–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${options.courseSlug}`);
  }

  console.log(`‚úÖ –ö—É—Ä—Å: "${(course as any).title}" (${(course as any).id})\n`);

  // Get lessons with transcripts
  console.log('üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏...\n');
  
  let query = supabase
    .from('lessons')
    .select('*')
    .eq('course_id', (course as any).id)
    .not('content->transcription', 'is', null)
    .order('lesson_number', { ascending: true });

  if (options.startLesson) {
    query = query.gte('lesson_number', options.startLesson);
  }
  if (options.endLesson) {
    query = query.lte('lesson_number', options.endLesson);
  }

  const { data: lessons, error: lessonsError } = await query;

  if (lessonsError) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤: ${lessonsError.message}`);
  }

  if (!lessons || lessons.length === 0) {
    console.log('‚ö†Ô∏è  –£—Ä–æ–∫–∏ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n');
    return;
  }

  console.log(`–ù–∞–π–¥–µ–Ω–æ ${lessons.length} —É—Ä–æ–∫–æ–≤ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏\n`);
  console.log('='.repeat(70) + '\n');

  // Create output directory
  const outputDir = path.join(process.cwd(), 'store', options.courseSlug, 'templates');
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${outputDir}\n`);
  }

  // Process each lesson
  let successful = 0;
  let failed = 0;

  for (const lessonData of lessons) {
    const lesson = lessonData as any;
    console.log('‚îÅ'.repeat(70));
    console.log(`üìö –£–†–û–ö ${lesson.lesson_number}: ${lesson.title}`);
    console.log('‚îÅ'.repeat(70) + '\n');

    try {
      const transcript = lesson.content?.transcription as string;
      
      if (!transcript) {
        console.log('   ‚ö†Ô∏è  –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø—É—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\n');
        failed++;
        continue;
      }

      console.log(`   üìÑ –î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: ${transcript.length} —Å–∏–º–≤–æ–ª–æ–≤`);

      // Generate template
      const template = await generateLessonTemplate(
        lesson.lesson_number,
        lesson.title,
        transcript
      );

      if (!template) {
        console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω\n');
        failed++;
        continue;
      }

      // Save template to file
      const templateFile = path.join(
        outputDir,
        `lesson-${lesson.lesson_number.toString().padStart(2, '0')}-template.json`
      );

      fs.writeFileSync(
        templateFile,
        JSON.stringify(template, null, 2),
        'utf8'
      );

      console.log(`   üíæ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${path.relative(process.cwd(), templateFile)}`);

      // Update lesson in database with template
      const updatePayload: any = {
        content: {
          ...(lesson.content || {}),
          template: template
        }
      };
      
      // @ts-ignore - Supabase type inference issue
      const { error: updateError } = await supabase
        .from('lessons')
        .update(updatePayload)
        .eq('id', lesson.id);

      if (updateError) {
        console.log(`   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ë–î: ${updateError.message}`);
      } else {
        console.log(`   ‚úÖ –®–∞–±–ª–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
      }

      console.log('');
      successful++;

    } catch (error: any) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}\n`);
      failed++;
    }
  }

  // Print summary
  console.log('='.repeat(70));
  console.log('üéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
  console.log('='.repeat(70));
  console.log(`–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: ${lessons.length}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${failed}`);
  console.log(`üìÅ –ü–∞–ø–∫–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏: ${path.relative(process.cwd(), outputDir)}`);
  console.log('='.repeat(70) + '\n');
}

/**
 * Parse CLI args
 */
function parseCliArgs(args: string[]): GenerateOptions {
  const options: Partial<GenerateOptions> = {};

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];

    if (arg.includes('=')) {
      const [key, value] = arg.split('=');
      
      switch (key) {
        case '--course-slug':
          options.courseSlug = value;
          break;
        case '--start-lesson':
          options.startLesson = parseInt(value, 10);
          break;
        case '--end-lesson':
          options.endLesson = parseInt(value, 10);
          break;
      }
    } else {
      switch (arg) {
        case '--course-slug':
          options.courseSlug = args[++i];
          break;
        case '--start-lesson':
          options.startLesson = parseInt(args[++i], 10);
          break;
        case '--end-lesson':
          options.endLesson = parseInt(args[++i], 10);
          break;
        case '--help':
        case '-h':
          printHelp();
          process.exit(0);
      }
    }
  }

  if (!options.courseSlug) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: --course-slug\n');
    printHelp();
    process.exit(1);
  }

  return options as GenerateOptions;
}

/**
 * Print help
 */
function printHelp(): void {
  console.log(`
Generate Lesson Templates from Transcripts

Usage:
  npx tsx --env-file=.env.local scripts/generate-course-templates.ts [options]

Required:
  --course-slug <slug>    Course slug (e.g., "taping-basics")

Optional:
  --start-lesson <num>    Start from lesson N (default: 1)
  --end-lesson <num>      End at lesson N (default: all lessons)
  -h, --help              Show this help

Examples:
  # Generate templates for all lessons
  npx tsx --env-file=.env.local scripts/generate-course-templates.ts \\
    --course-slug=taping-basics

  # Generate for specific lesson range
  npx tsx --env-file=.env.local scripts/generate-course-templates.ts \\
    --course-slug=taping-basics \\
    --start-lesson=1 \\
    --end-lesson=3

Requirements:
  - OPENAI_API_KEY in .env.local
  - NEXT_PUBLIC_SUPABASE_URL in .env.local
  - NEXT_PUBLIC_SUPABASE_ANON_KEY in .env.local
  - Lessons must have transcripts in database
`);
}

// Main execution
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.length === 0 || args.includes('--help') || args.includes('-h')) {
    printHelp();
    process.exit(0);
  }

  const options = parseCliArgs(args);

  generateCourseTemplates(options)
    .then(() => {
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ\n');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      console.error(error.stack);
      process.exit(1);
    });
}
