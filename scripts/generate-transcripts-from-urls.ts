#!/usr/bin/env tsx
/**
 * Generate transcripts for lessons from Kinescope video URLs
 * Uses the courses_rules.md file to get video IDs
 */

import 'dotenv/config';
import { createKinescopeService } from '@/lib/services/kinescope';
import { downloadVideo, extractAudio } from '@/lib/services/video-processing';
import { transcribeAudioFile } from '@/lib/services/transcription';
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/lib/supabase/types';
import fs from 'fs';
import path from 'path';

interface LessonVideo {
  lessonNumber: number;
  videoId: string;
  courseSlug: string;
}

/**
 * Parse courses_rules.md to extract video URLs and IDs
 */
function parseCoursesRules(filePath: string): Map<string, LessonVideo[]> {
  const content = fs.readFileSync(filePath, 'utf-8');
  const lines = content.split('\n');
  
  const courseMap = new Map<string, LessonVideo[]>();
  let currentCourse = '';
  
  for (const line of lines) {
    const courseMatch = line.match(/^course=(.+)$/);
    if (courseMatch) {
      currentCourse = courseMatch[1];
      courseMap.set(currentCourse, []);
      continue;
    }
    
    const lessonMatch = line.match(/^lesson (\d+) - https:\/\/kinescope\.io\/([a-zA-Z0-9]+)$/);
    if (lessonMatch && currentCourse) {
      const lessons = courseMap.get(currentCourse)!;
      lessons.push({
        lessonNumber: parseInt(lessonMatch[1], 10),
        videoId: lessonMatch[2],
        courseSlug: currentCourse,
      });
    }
  }
  
  return courseMap;
}

/**
 * Process a single lesson video
 */
async function processLesson(
  lesson: LessonVideo,
  courseId: string,
  courseTitle: string,
  supabase: ReturnType<typeof createClient<Database>>,
  kinescope: ReturnType<typeof createKinescopeService>,
  skipExisting: boolean = true
): Promise<boolean> {
  console.log('\n' + '‚îÅ'.repeat(70));
  console.log(`üìö –£–†–û–ö ${lesson.lessonNumber}`);
  console.log(`   –ö—É—Ä—Å: ${courseTitle}`);
  console.log(`   Video ID: ${lesson.videoId}`);
  console.log('‚îÅ'.repeat(70) + '\n');

  try {
    // Check if transcript already exists
    if (skipExisting) {
      const { data: existingLesson } = await supabase
        .from('lessons')
        .select('content')
        .eq('course_id', courseId)
        .eq('lesson_number', lesson.lessonNumber)
        .maybeSingle() as any;

      if (existingLesson?.content?.transcription) {
        console.log('‚è≠Ô∏è  –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...\n');
        return true;
      }
    }

    // Get video info from Kinescope
    console.log('üìπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ...\n');
    const videoInfo = await kinescope.getVideoDetails(lesson.videoId);
    
    if (!videoInfo) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ');
    }

    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${videoInfo.title}`);
    console.log(`   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.floor(videoInfo.duration / 60)}–º ${Math.floor(videoInfo.duration % 60)}—Å\n`);

    // Setup file paths
    const videoFileName = `${lesson.lessonNumber.toString().padStart(2, '0')}-${lesson.videoId}.mp4`;
    const audioFileName = `${lesson.lessonNumber.toString().padStart(2, '0')}-${lesson.videoId}.mp3`;
    
    const storeDir = path.join(process.cwd(), 'store', lesson.courseSlug);
    const videoPath = path.join(storeDir, 'videos', videoFileName);
    const audioPath = path.join(storeDir, 'audio', audioFileName);

    // Create directories
    fs.mkdirSync(path.dirname(videoPath), { recursive: true });
    fs.mkdirSync(path.dirname(audioPath), { recursive: true });

    // Step 1: Download video
    if (!fs.existsSync(videoPath)) {
      console.log('‚¨áÔ∏è  –®–∞–≥ 1/4: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ (360p)...\n');
      
      const downloadUrl = await kinescope.getDownloadUrl(lesson.videoId, '360p');
      
      await downloadVideo({
        url: downloadUrl,
        outputPath: videoPath,
        onProgress: (downloaded, total) => {
          const percent = ((downloaded / total) * 100).toFixed(1);
          const downloadedMB = (downloaded / 1024 / 1024).toFixed(1);
          const totalMB = (total / 1024 / 1024).toFixed(1);
          process.stdout.write(`\r   –ü—Ä–æ–≥—Ä–µ—Å—Å: ${percent}% (${downloadedMB}/${totalMB} –ú–ë)`);
        },
      });
      
      console.log('\n‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n');
    } else {
      console.log('‚è≠Ô∏è  –®–∞–≥ 1/4: –í–∏–¥–µ–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n');
    }

    // Step 2: Extract audio
    if (!fs.existsSync(audioPath)) {
      console.log('üéµ –®–∞–≥ 2/4: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...\n');
      
      await extractAudio({
        inputPath: videoPath,
        outputPath: audioPath,
        format: 'mp3',
        bitrate: '128k',
      });
      
      console.log('‚úÖ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ\n');
    } else {
      console.log('‚è≠Ô∏è  –®–∞–≥ 2/4: –ê—É–¥–∏–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n');
    }

    // Step 3: Transcribe
    console.log('üé§ –®–∞–≥ 3/4: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...\n');
    
    const transcript = await transcribeAudioFile(
      audioPath,
      lesson.courseSlug,
      lesson.lessonNumber,
      'ru'
    );
    
    console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω (${transcript.characterCount} —Å–∏–º–≤–æ–ª–æ–≤)\n`);

    // Step 4: Store in database
    console.log('üíæ –®–∞–≥ 4/4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...\n');
    
    const { error: upsertError } = await (supabase
      .from('lessons')
      .upsert(
        {
          course_id: courseId,
          lesson_number: lesson.lessonNumber,
          title: videoInfo.title,
          summary: `–£—Ä–æ–∫ ${lesson.lessonNumber}: ${videoInfo.title}`,
          content: {
            transcription: transcript.text,
            transcription_length: transcript.characterCount,
            transcription_duration: transcript.duration,
            transcription_language: transcript.language,
            transcription_source: 'openai-whisper-1',
            transcription_date: new Date().toISOString(),
            video_id: lesson.videoId,
            video_duration: videoInfo.duration,
          },
        } as any,
        {
          onConflict: 'course_id,lesson_number',
        }
      ) as any);

    if (upsertError) {
      throw new Error(`–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${upsertError.message}`);
    }

    console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n');

    // Step 5: Clean up temporary files
    console.log('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...\n');
    
    try {
      if (fs.existsSync(videoPath)) {
        fs.unlinkSync(videoPath);
        console.log('   ‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –≤–∏–¥–µ–æ');
      }
      if (fs.existsSync(audioPath)) {
        fs.unlinkSync(audioPath);
        console.log('   ‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∞—É–¥–∏–æ');
      }
    } catch (cleanupError: any) {
      console.warn(`   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏: ${cleanupError.message}`);
    }
    
    console.log('\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n');
    return true;

  } catch (error: any) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Ä–æ–∫–∞ ${lesson.lessonNumber}:`);
    console.error(`   ${error.message}\n`);
    return false;
  }
}

/**
 * Main function
 */
async function main() {
  const coursesRulesPath = path.join(process.cwd(), 'courses_rules.md');
  
  console.log('\n' + '='.repeat(70));
  console.log('üöÄ –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–†–ê–ù–°–ö–†–ò–ü–¢–û–í –ò–ó COURSES_RULES.MD');
  console.log('='.repeat(70) + '\n');

  // Parse courses_rules.md
  console.log('üìñ –ß—Ç–µ–Ω–∏–µ courses_rules.md...\n');
  const courseMap = parseCoursesRules(coursesRulesPath);
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤: ${courseMap.size}\n`);
  for (const [slug, lessons] of courseMap.entries()) {
    console.log(`   ${slug}: ${lessons.length} —É—Ä–æ–∫–æ–≤`);
  }
  console.log();

  // Initialize services
  console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...\n');
  
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY ?? process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
  
  if (!supabaseUrl || !supabaseKey) {
    throw new Error('–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  const supabase = createClient<Database>(supabaseUrl, supabaseKey, {
    auth: { persistSession: false }
  });

  const kinescope = createKinescopeService();

  // Get command line arguments
  const args = process.argv.slice(2);
  const targetCourse = args.find(arg => !arg.startsWith('--'));
  const skipExisting = !args.includes('--force');

  // Process each course
  for (const [courseSlug, lessons] of courseMap.entries()) {
    // Skip if target course specified and this isn't it
    if (targetCourse && courseSlug !== targetCourse) {
      continue;
    }

    console.log('\n' + '‚ïê'.repeat(70));
    console.log(`üìö –ö–£–†–°: ${courseSlug}`);
    console.log('‚ïê'.repeat(70) + '\n');

    // Get or create course in database
    const { data: existingCourse } = await (supabase
      .from('courses')
      .select('id, title')
      .eq('slug', courseSlug)
      .maybeSingle() as any);

    let courseId: string;
    let courseTitle: string;

    if (existingCourse) {
      courseId = existingCourse.id;
      courseTitle = existingCourse.title;
      console.log(`‚úÖ –ö—É—Ä—Å –Ω–∞–π–¥–µ–Ω: "${courseTitle}" (${courseId})\n`);
    } else {
      const courseTitles: Record<string, string> = {
        'massazh-shvz': '–ú–∞—Å—Å–∞–∂ –®–í–ó',
        'taping-basics': '–û—Å–Ω–æ–≤—ã —Ç–µ–π–ø–∏—Ä–æ–≤–∞–Ω–∏—è',
      };

      courseTitle = courseTitles[courseSlug] || courseSlug;

      const { data: newCourse, error } = await (supabase
        .from('courses')
        .insert({
          slug: courseSlug,
          title: courseTitle,
          description: `Course ${courseTitle}`,
        } as any)
        .select('id')
        .single() as any);

      if (error || !newCourse) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å: ${error?.message}`);
      }

      courseId = newCourse.id;
      console.log(`‚úÖ –ö—É—Ä—Å —Å–æ–∑–¥–∞–Ω: "${courseTitle}" (${courseId})\n`);
    }

    // Process lessons
    const stats = {
      total: lessons.length,
      successful: 0,
      failed: 0,
      skipped: 0,
    };

    for (const lesson of lessons) {
      const success = await processLesson(
        lesson,
        courseId,
        courseTitle,
        supabase,
        kinescope,
        skipExisting
      );

      if (success) {
        const { data: checkLesson } = await (supabase
          .from('lessons')
          .select('content')
          .eq('course_id', courseId)
          .eq('lesson_number', lesson.lessonNumber)
          .maybeSingle() as any);

        if (checkLesson?.content?.transcription) {
          stats.successful++;
        } else {
          stats.skipped++;
        }
      } else {
        stats.failed++;
      }
    }

    // Print course summary
    console.log('\n' + '‚ïê'.repeat(70));
    console.log(`üìä –ò–¢–û–ì–ò –î–õ–Ø –ö–£–†–°–ê: ${courseSlug}`);
    console.log('‚ïê'.repeat(70));
    console.log(`–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: ${stats.total}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${stats.successful}`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${stats.skipped}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${stats.failed}`);
    console.log('‚ïê'.repeat(70) + '\n');
  }

  console.log('\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n');
}

// Run main
if (require.main === module) {
  main()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      console.error(error.stack);
      process.exit(1);
    });
}
