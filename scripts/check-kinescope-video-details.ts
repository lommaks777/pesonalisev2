#!/usr/bin/env tsx
import 'dotenv/config';
import axios from 'axios';

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç parent_id –∏–∑ URL —Å segment –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
 * URL —Ñ–æ—Ä–º–∞—Ç–∞: https://app.kinescope.io/video?segment=eyJwYXJlbnRfaWQiOiI2NTI3MjE0Mi0xNWExLTQ3ZmEtOTAzZS1jNzc5ZjEwMWYxNDkifQ
 */
function extractParentIdFromUrl(url: string): string | null {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º segment –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ URL
    const urlObj = new URL(url);
    const segment = urlObj.searchParams.get('segment');
    
    if (!segment) {
      console.log('‚ö†Ô∏è Segment –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL');
      return null;
    }
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω segment: ${segment}`);
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
    const decoded = Buffer.from(segment, 'base64').toString('utf-8');
    console.log(`üì¶ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π segment: ${decoded}`);
    
    // –ü–∞—Ä—Å–∏–º JSON
    const data = JSON.parse(decoded);
    
    if (data.parent_id) {
      console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω parent_id: ${data.parent_id}\n`);
      return data.parent_id;
    }
    
    console.log('‚ö†Ô∏è parent_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ segment');
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ parent_id:', error);
    return null;
  }
}

async function main() {
  const apiKey = process.env.KINESCOPE_API_KEY;
  
  if (!apiKey) {
    console.error('‚ùå KINESCOPE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const client = axios.create({
    baseURL: 'https://api.kinescope.io/v1',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
  });

  // URL —Å segment –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
  const url = process.argv[2] || 'https://app.kinescope.io/video?segment=eyJwYXJlbnRfaWQiOiI2NTI3MjE0Mi0xNWExLTQ3ZmEtOTAzZS1jNzc5ZjEwMWYxNDkifQ';
  
  console.log(`üåê URL: ${url}\n`);
  
  const folderId = extractParentIdFromUrl(url);
  
  if (!folderId) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å folder_id –∏–∑ URL');
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è folder_id –∫–∞–∫ query –ø–∞—Ä–∞–º–µ—Ç—Ä
    console.log(`üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è folder_id: ${folderId}\n`);
    
    const response = await client.get('/videos', {
      params: {
        folder_id: folderId,
        per_page: 100,
        order: 'created_at.desc'
      }
    });
    
    const videos = response.data.data || [];
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: ${videos.length}\n`);
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –≤–∏–¥–µ–æ
    videos.forEach((video: any, index: number) => {
      console.log(`\nüìπ –í–∏–¥–µ–æ ${index + 1}:`);
      console.log(`   ID: ${video.id}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${video.title}`);
      console.log(`   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${video.duration ? Math.round(video.duration / 60) : '?'} –º–∏–Ω`);
      console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${video.created_at}`);
      
      if (video.subtitles && video.subtitles.length > 0) {
        console.log(`   ‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã: ${video.subtitles.length}`);
        video.subtitles.forEach((sub: any) => {
          console.log(`      - ${sub.label || sub.language}: ${sub.url}`);
        });
      }
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ JSON
    const fs = await import('fs');
    const outputPath = './kinescope-videos-list.json';
    fs.writeFileSync(outputPath, JSON.stringify(videos, null, 2));
    console.log(`\nüíæ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputPath}`);

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
    if (error.response?.data) {
      console.error('–î–µ—Ç–∞–ª–∏:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

main();
