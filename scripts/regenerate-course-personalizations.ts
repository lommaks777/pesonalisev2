#!/usr/bin/env tsx
import { config } from 'dotenv';
import { resolve } from 'path';
import { createClient } from '@supabase/supabase-js';
import { getOpenAIClient } from '../lib/services/openai';

// Load environment variables
config({ path: resolve(process.cwd(), '.env.local') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (–∫–æ–ø–∏—è –∏–∑ personalization-engine.ts —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º)
async function generatePersonalizedDescription(
  lessonId: string,
  transcript: string,
  lessonMetadata: { lesson_number: number; title: string },
  surveyData: any,
  userName: string
): Promise<any> {
  const openai = getOpenAIClient();

  const prompt = `–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –º–µ—Ç–æ–¥–æ–ª–æ–≥ –∫—É—Ä—Å–∞ –º–∞—Å—Å–∞–∂–∞ –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –ì–õ–£–ë–û–ö–û –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≤–∏–¥–µ–æ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∫–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –£–†–û–ö–ï:
–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞: ${lessonMetadata.lesson_number}
–ù–∞–∑–≤–∞–Ω–∏–µ: ${lessonMetadata.title}

–ü–û–õ–ù–ê–Ø –†–ê–°–®–ò–§–†–û–í–ö–ê –£–†–û–ö–ê (${transcript.length} —Å–∏–º–≤–æ–ª–æ–≤):
${transcript.substring(0, 15000)}${transcript.length > 15000 ? '...' : ''}

–ê–ù–ö–ï–¢–ê –°–¢–£–î–ï–ù–¢–ê:
- –ò–º—è: ${userName}
- –ú–æ—Ç–∏–≤–∞—Ü–∏—è: ${surveyData.motivation?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –¶–µ–ª–µ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: ${surveyData.target_clients || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ñ–µ–ª–∞–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: ${surveyData.skills_wanted || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –°—Ç—Ä–∞—Ö–∏/–æ–ø–∞—Å–µ–Ω–∏—è: ${surveyData.fears?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ñ–µ–ª–∞–µ–º—ã–π wow-—Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${surveyData.wow_result || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ú–æ–¥–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏: ${surveyData.practice_model || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

–ó–ê–î–ê–ù–ò–ï:
–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞.

–ö–†–ò–¢–ï–†–ò–ò –ö–ê–ß–ï–°–¢–í–ê:
‚úì –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ö–û–ù–ö–†–ï–¢–ù–´–ï —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
‚úì –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å –º–∞—Å—Å–∞–∂—É" - –±—É–¥—å –ö–û–ù–ö–†–ï–¢–ï–ù
‚úì –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∏ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
‚úì –ö–∞–∂–¥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏–µ –∫–∞–∫ —É—Ä–æ–∫–∞, —Ç–∞–∫ –∏ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
‚úì –Ø–∑—ã–∫: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ "–≤—ã"
‚úì –£—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞: B1-B2 (–ø–æ–Ω—è—Ç–Ω–æ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏)
‚úì –í–°–ï –¢–ï–ö–°–¢–´ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï (RUSSIAN LANGUAGE ONLY)

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{
  "introduction": "—Å—Ç—Ä–æ–∫–∞",
  "why_it_matters_for_you": "—Å—Ç—Ä–æ–∫–∞",
  "key_takeaways": ["–ø—É–Ω–∫—Ç 1", "–ø—É–Ω–∫—Ç 2", "–ø—É–Ω–∫—Ç 3"],
  "practical_application": "—Å—Ç—Ä–æ–∫–∞",
  "addressing_fears": "—Å—Ç—Ä–æ–∫–∞",
  "personalized_homework": "—Å—Ç—Ä–æ–∫–∞",
  "motivational_quote": "—Å—Ç—Ä–æ–∫–∞"
}

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ –±–µ–∑ markdown-—Ä–∞–∑–º–µ—Ç–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

  const completion = await openai.chat.completions.create({
    model: 'gpt-4o',
    messages: [
      {
        role: 'system',
        content: '–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –º–µ—Ç–æ–¥–æ–ª–æ–≥ –∫—É—Ä—Å–∞ –º–∞—Å—Å–∞–∂–∞ –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –°–æ–∑–¥–∞—ë—à—å –≥–ª—É–±–æ–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤. –û—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ. You must respond in Russian language only.',
      },
      {
        role: 'user',
        content: prompt,
      },
    ],
    temperature: 0.7,
    max_tokens: 2500,
    response_format: { type: 'json_object' },
  });

  const content = completion.choices[0]?.message?.content || '{}';
  let cleanContent = content.trim();
  if (cleanContent.startsWith('```json')) {
    cleanContent = cleanContent.replace(/^```json\s*/, '').replace(/\s*```$/, '');
  }
  if (cleanContent.startsWith('```')) {
    cleanContent = cleanContent.replace(/^```\s*/, '').replace(/\s*```$/, '');
  }

  return JSON.parse(cleanContent);
}

interface RegenerationStats {
  totalProfiles: number;
  processedProfiles: number;
  totalLessons: number;
  successfulGenerations: number;
  failedGenerations: number;
  skippedGenerations: number;
}

async function regenerateCoursePersonalizations(courseSlug: string) {
  console.log(`\nüîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –∫—É—Ä—Å–∞: ${courseSlug}\n`);
  console.log('='.repeat(70));

  const stats: RegenerationStats = {
    totalProfiles: 0,
    processedProfiles: 0,
    totalLessons: 0,
    successfulGenerations: 0,
    failedGenerations: 0,
    skippedGenerations: 0,
  };

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
    const { data: course, error: courseError } = await supabase
      .from('courses')
      .select('id, slug')
      .eq('slug', courseSlug)
      .single();

    if (courseError || !course) {
      console.error(`‚ùå –ö—É—Ä—Å "${courseSlug}" –Ω–µ –Ω–∞–π–¥–µ–Ω:`, courseError?.message);
      return;
    }

    console.log(`üìö –ö—É—Ä—Å: ${course.slug}`);
    console.log(`üìã ID –∫—É—Ä—Å–∞: ${course.id}\n`);

    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, user_identifier, name, survey')
      .eq('course_slug', courseSlug);

    if (profilesError || !profiles || profiles.length === 0) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', profilesError?.message);
      return;
    }

    stats.totalProfiles = profiles.length;
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${profiles.length}\n`);

    // 3. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞
    const { data: lessons, error: lessonsError } = await supabase
      .from('lessons')
      .select('id, lesson_number, title, content')
      .eq('course_id', course.id)
      .order('lesson_number', { ascending: true });

    if (lessonsError || !lessons || lessons.length === 0) {
      console.error('‚ùå –£—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', lessonsError?.message);
      return;
    }

    stats.totalLessons = lessons.length;
    console.log(`üìñ –ù–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: ${lessons.length}\n`);
    console.log('='.repeat(70));

    // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const profile of profiles) {
      stats.processedProfiles++;
      
      console.log(`\n[${stats.processedProfiles}/${stats.totalProfiles}] üë§ ${profile.name} (${profile.user_identifier})`);

      if (!profile.survey) {
        console.log('   ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        stats.skippedGenerations += lessons.length;
        continue;
      }

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: deleteError } = await supabase
        .from('personalized_lesson_descriptions')
        .delete()
        .eq('profile_id', profile.id);

      if (deleteError) {
        console.error('   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–π:', deleteError.message);
      } else {
        console.log('   üóëÔ∏è  –°—Ç–∞—Ä—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞
      for (const lesson of lessons) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
          const transcriptData = lesson.content as any;
          
          if (!transcriptData?.transcription) {
            console.log(`   ‚ö†Ô∏è  –£—Ä–æ–∫ ${lesson.lesson_number}: –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            stats.skippedGenerations++;
            continue;
          }

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
          const personalization = await generatePersonalizedDescription(
            lesson.id,
            transcriptData.transcription,
            {
              lesson_number: lesson.lesson_number,
              title: lesson.title,
            },
            profile.survey as any,
            profile.name
          );

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)
          const { error: saveError } = await supabase
            .from('personalized_lesson_descriptions')
            .upsert({
              profile_id: profile.id,
              lesson_id: lesson.id,
              content: personalization,
            }, {
              onConflict: 'profile_id,lesson_id'
            });

          if (saveError) {
            console.log(`   ‚ùå –£—Ä–æ–∫ ${lesson.lesson_number}: –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - ${saveError.message}`);
            stats.failedGenerations++;
          } else {
            console.log(`   ‚úÖ –£—Ä–æ–∫ ${lesson.lesson_number}: –≥–æ—Ç–æ–≤–æ`);
            stats.successfulGenerations++;
          }

          // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ OpenAI
          await new Promise(resolve => setTimeout(resolve, 2000));

        } catch (error) {
          console.log(`   ‚ùå –£—Ä–æ–∫ ${lesson.lesson_number}: –æ—à–∏–±–∫–∞ -`, error instanceof Error ? error.message : error);
          stats.failedGenerations++;
        }
      }
    }

    // 5. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n' + '='.repeat(70));
    console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n');
    console.log(`üë• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.processedProfiles}/${stats.totalProfiles}`);
    console.log(`üìñ –£—Ä–æ–∫–æ–≤ –≤ –∫—É—Ä—Å–µ: ${stats.totalLessons}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${stats.successfulGenerations}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${stats.failedGenerations}`);
    console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${stats.skippedGenerations}`);
    
    const totalExpected = stats.totalProfiles * stats.totalLessons;
    const successRate = totalExpected > 0 
      ? ((stats.successfulGenerations / totalExpected) * 100).toFixed(1) 
      : '0';
    
    console.log(`\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`);
    console.log('\n' + '='.repeat(70));

  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
const courseSlug = process.argv[2] || 'taping-basics';

console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–π...');
console.log(`üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date().toLocaleString('ru-RU')}`);

regenerateCoursePersonalizations(courseSlug)
  .then(() => {
    console.log(`\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n`);
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–æ–π\n');
    process.exit(1);
  });
