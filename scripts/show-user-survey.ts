import { config } from "dotenv";
import { createClient } from "@supabase/supabase-js";

// Load .env.local
config({ path: ".env.local" });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

const supabase = createClient(supabaseUrl, supabaseKey);

async function showUserSurvey(userIdentifier: string) {
  console.log(`\nüìã –û—Ç–≤–µ—Ç—ã –Ω–∞ –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userIdentifier}\n`);
  console.log("=".repeat(60));

  // Get profile with survey data
  const { data: profile, error } = await supabase
    .from("profiles")
    .select("*")
    .eq("user_identifier", userIdentifier)
    .maybeSingle();

  if (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    return;
  }

  if (!profile) {
    console.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  console.log(`\nüë§ –ü–†–û–§–ò–õ–¨:\n`);
  console.log(`   ID: ${profile.id}`);
  console.log(`   User Identifier: ${profile.user_identifier}`);
  console.log(`   –ò–º—è: ${profile.name}`);
  console.log(`   –°–æ–∑–¥–∞–Ω: ${profile.created_at}`);
  console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${profile.updated_at}`);

  if (!profile.survey) {
    console.log(`\n‚ö†Ô∏è  –ê–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞`);
    return;
  }

  const survey = profile.survey as any;

  console.log(`\n\nüìù –û–¢–í–ï–¢–´ –ù–ê –ê–ù–ö–ï–¢–£:\n`);
  console.log("=".repeat(60));

  // Real name
  if (survey.real_name) {
    console.log(`\n‚úèÔ∏è  –ò–º—è:`);
    console.log(`   ${survey.real_name}`);
  }

  // Course
  if (survey.course) {
    console.log(`\nüìö –ö—É—Ä—Å:`);
    console.log(`   ${survey.course}`);
  }

  // Experience
  if (survey.experience) {
    console.log(`\nüéì –û–ø—ã—Ç –≤ –º–∞—Å—Å–∞–∂–µ:`);
    console.log(`   ${formatExperience(survey.experience)}`);
  }

  // Motivation
  if (survey.motivation) {
    console.log(`\nüéØ –ú–æ—Ç–∏–≤–∞—Ü–∏—è (–∑–∞—á–µ–º –∏–∑—É—á–∞–µ—Ç–µ –º–∞—Å—Å–∞–∂):`);
    if (Array.isArray(survey.motivation)) {
      survey.motivation.forEach((m: string) => {
        console.log(`   ‚Ä¢ ${formatMotivation(m)}`);
      });
    } else {
      console.log(`   ${formatMotivation(survey.motivation)}`);
    }
  }

  if (survey.motivation_other) {
    console.log(`   –î—Ä—É–≥–æ–µ: ${survey.motivation_other}`);
  }

  // Target clients
  if (survey.target_clients) {
    console.log(`\nüë• –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤:`);
    console.log(`   ${survey.target_clients}`);
  }

  // Skills wanted
  if (survey.skills_wanted) {
    console.log(`\nüéØ –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:`);
    console.log(`   ${survey.skills_wanted}`);
  }

  // Fears
  if (survey.fears) {
    console.log(`\nüò∞ –°—Ç—Ä–∞—Ö–∏/–æ–ø–∞—Å–µ–Ω–∏—è:`);
    if (Array.isArray(survey.fears)) {
      survey.fears.forEach((f: string) => {
        console.log(`   ‚Ä¢ ${formatFear(f)}`);
      });
    } else {
      console.log(`   ${formatFear(survey.fears)}`);
    }
  }

  if (survey.fears_other) {
    console.log(`   –î—Ä—É–≥–æ–µ: ${survey.fears_other}`);
  }

  // WOW Result
  if (survey.wow_result) {
    console.log(`\nüåü –ñ–µ–ª–∞–µ–º—ã–π WOW-—Ä–µ–∑—É–ª—å—Ç–∞—Ç:`);
    console.log(`   ${survey.wow_result}`);
  }

  // Practice model
  if (survey.practice_model) {
    console.log(`\nü§ù –ù–∞ –∫–æ–º –±—É–¥–µ—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è:`);
    console.log(`   ${survey.practice_model}`);
  }

  // Additional fields (if exist)
  const additionalFields = [
    'age', 'massage_experience', 'skill_level', 'goals', 
    'problems', 'available_time', 'preferences'
  ];

  const hasAdditionalFields = additionalFields.some(field => survey[field]);

  if (hasAdditionalFields) {
    console.log(`\n\nüìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï:\n`);
    console.log("=".repeat(60));

    additionalFields.forEach(field => {
      if (survey[field]) {
        console.log(`\n${formatFieldName(field)}:`);
        console.log(`   ${survey[field]}`);
      }
    });
  }

  console.log(`\n\n${"=".repeat(60)}\n`);
}

function formatExperience(exp: string): string {
  const map: Record<string, string> = {
    'beginner': '–ù–∞—á–∏–Ω–∞—é—â–∏–π (–Ω–µ—Ç –æ–ø—ã—Ç–∞)',
    'self_taught': '–°–∞–º–æ—É—á–∫–∞ (–∑–∞–Ω–∏–º–∞–ª—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ)',
    'intermediate': '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å',
    'advanced': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
    'professional': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'
  };
  return map[exp] || exp;
}

function formatMotivation(mot: string): string {
  const map: Record<string, string> = {
    'new_profession': '–ù–æ–≤–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è',
    'extra_income': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥',
    'help_family': '–ü–æ–º–æ—â—å —Å–µ–º—å–µ',
    'help_others': '–ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º',
    'health_improvement': '–£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è',
    'self_development': '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ',
    'hobby': '–•–æ–±–±–∏'
  };
  return map[mot] || mot;
}

function formatFear(fear: string): string {
  const map: Record<string, string> = {
    'technique_fail': '–ù–µ –ø–æ–ª—É—á–∏—Ç—Å—è —Ç–µ—Ö–Ω–∏–∫–∞',
    'no_clients': '–ù–µ —Å–º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤',
    'hurt_someone': '–ù–∞–≤—Ä–µ–¥–∏—Ç—å –∫–æ–º—É-—Ç–æ',
    'no_time': '–ù–µ —Ö–≤–∞—Ç–∏—Ç –≤—Ä–µ–º–µ–Ω–∏',
    'too_difficult': '–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ',
    'no_confidence': '–ù–µ —É–≤–µ—Ä–µ–Ω –≤ —Å–µ–±–µ'
  };
  return map[fear] || fear;
}

function formatFieldName(field: string): string {
  const map: Record<string, string> = {
    'age': 'üë§ –í–æ–∑—Ä–∞—Å—Ç',
    'massage_experience': 'üíÜ –û–ø—ã—Ç –º–∞—Å—Å–∞–∂–∞',
    'skill_level': 'üìä –£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–æ–≤',
    'goals': 'üéØ –¶–µ–ª–∏',
    'problems': '‚ùó –ü—Ä–æ–±–ª–µ–º—ã',
    'available_time': '‚è∞ –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è',
    'preferences': '‚≠ê –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è'
  };
  return map[field] || field;
}

const userIdentifier = process.argv[2] || "21179358";
showUserSurvey(userIdentifier).catch(console.error);
