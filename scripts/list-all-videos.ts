#!/usr/bin/env tsx
import 'dotenv/config';
import axios from 'axios';

async function main() {
  const apiKey = process.env.KINESCOPE_API_KEY;
  
  if (!apiKey) {
    console.error('‚ùå KINESCOPE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const client = axios.create({
    baseURL: 'https://api.kinescope.io/v1',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
  });

  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ
    console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ...\n');
    
    try {
      const videosResp = await client.get('/videos', {
        params: {
          per_page: 100,
        }
      });
      const allVideos = videosResp.data.data || videosResp.data.videos || [];
      
      console.log(`‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: ${allVideos.length}\n`);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∏–¥–µ–æ —Å "–∫–∏–Ω–µ–∑–∏–æ"
      const kinesioVideos = allVideos.filter((v: any) => 
        v.title && (
          v.title.toLowerCase().includes('–∫–∏–Ω–µ–∑–∏–æ') || 
          v.title.toLowerCase().includes('kinesio')
        )
      );
      
      if (kinesioVideos.length > 0) {
        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Å "–∫–∏–Ω–µ–∑–∏–æ": ${kinesioVideos.length}\n`);
        kinesioVideos.forEach((v: any, i: number) => {
          console.log(`${i + 1}. ${v.title}`);
          console.log(`   ID: ${v.id}`);
          console.log(`   –ü—Ä–æ–µ–∫—Ç ID: ${v.project_id || 'N/A'}`);
          console.log(`   –°—Ç–∞—Ç—É—Å: ${v.status}\n`);
        });
      } else {
        console.log('‚ö†Ô∏è  –í–∏–¥–µ–æ —Å "–∫–∏–Ω–µ–∑–∏–æ" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n');
        console.log('–ü–µ—Ä–≤—ã–µ 10 –≤–∏–¥–µ–æ:');
        allVideos.slice(0, 10).forEach((v: any, i: number) => {
          console.log(`${i + 1}. ${v.title}`);
        });
      }
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: ${error.response?.status} - ${error.response?.statusText}`);
      if (error.response?.data) {
        console.error(`   –î–∞–Ω–Ω—ã–µ:`, error.response.data);
      }
    }

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

main();
