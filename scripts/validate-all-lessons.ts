/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä–æ–≤ –ø–∞–ø–æ–∫ –∏ —É—Ä–æ–∫–æ–≤
 * –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
 */

import { createClient } from '@supabase/supabase-js';
import * as fs from 'fs/promises';
import * as path from 'path';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !serviceRoleKey) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, serviceRoleKey);

interface LessonFile {
  number: number;
  title: string;
  description?: any;
}

async function validateLessons() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–∞ "–ú–∞—Å—Å–∞–∂ –®–í–ó"...\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
  console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:');
  console.log('‚îÄ'.repeat(80));
  
  const lessonsDir = path.join(process.cwd(), 'store', 'shvz', 'lessons');
  const folders = await fs.readdir(lessonsDir);
  const sortedFolders = folders.filter(f => /^\d+$/.test(f)).sort();
  
  const fileSystemIssues: string[] = [];
  const lessonData: Array<{ folder: string; lesson: LessonFile }> = [];
  
  for (const folder of sortedFolders) {
    const lessonJsonPath = path.join(lessonsDir, folder, 'lesson.json');
    const content = await fs.readFile(lessonJsonPath, 'utf-8');
    const lesson: LessonFile = JSON.parse(content);
    
    lessonData.push({ folder, lesson });
    
    const folderNum = parseInt(folder);
    const lessonNum = lesson.number;
    const hasTemplate = lesson.description && typeof lesson.description === 'object' && lesson.description.template;
    
    const match = folderNum === lessonNum;
    const icon = match ? '‚úÖ' : '‚ùå';
    const templateIcon = hasTemplate ? 'üìÑ' : '‚ö†Ô∏è';
    
    console.log(`${icon} ${templateIcon} –ü–∞–ø–∫–∞ ${folder} ‚Üí –£—Ä–æ–∫ ‚Ññ${lessonNum}: ${lesson.title.substring(0, 50)}...`);
    
    if (!match) {
      fileSystemIssues.push(`–ü–∞–ø–∫–∞ ${folder} —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ä–æ–∫ ‚Ññ${lessonNum} (–Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!)`);
    }
    
    if (!hasTemplate) {
      fileSystemIssues.push(`–£—Ä–æ–∫ ${lessonNum} –≤ –ø–∞–ø–∫–µ ${folder} –Ω–µ –∏–º–µ–µ—Ç —à–∞–±–ª–æ–Ω–∞`);
    }
  }
  
  console.log('');
  
  if (fileSystemIssues.length > 0) {
    console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ:');
    fileSystemIssues.forEach(issue => console.log(`  - ${issue}`));
    console.log('');
  } else {
    console.log('‚úÖ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ –ø–æ—Ä—è–¥–∫–µ!\n');
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  console.log('üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  console.log('‚îÄ'.repeat(80));
  
  const { data: course } = await supabase
    .from('courses')
    .select('id, slug, title')
    .eq('slug', 'massazh-shvz')
    .single();
  
  if (!course) {
    console.log('‚ùå –ö—É—Ä—Å massazh-shvz –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!');
    return;
  }
  
  console.log(`üìö –ö—É—Ä—Å: ${course.title} (${course.slug})`);
  console.log('');
  
  const { data: dbLessons } = await supabase
    .from('lessons')
    .select('id, lesson_number, title, content')
    .eq('course_id', course.id)
    .order('lesson_number');
  
  const dbIssues: string[] = [];
  
  if (!dbLessons || dbLessons.length === 0) {
    console.log('‚ö†Ô∏è –£—Ä–æ–∫–∏ –≤ –ë–î –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!');
    console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx tsx --env-file=.env.local scripts/import-lessons.ts');
    console.log('');
  } else {
    console.log(`–ù–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤ –≤ –ë–î: ${dbLessons.length}\n`);
    
    for (const dbLesson of dbLessons) {
      const hasTemplate = dbLesson.content?.template;
      const templateIcon = hasTemplate ? 'üìÑ' : '‚ö†Ô∏è';
      
      // –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–∫ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
      const fsLesson = lessonData.find(l => l.lesson.number === dbLesson.lesson_number);
      const matchIcon = fsLesson ? '‚úÖ' : '‚ùå';
      
      console.log(`${matchIcon} ${templateIcon} –ë–î –£—Ä–æ–∫ ‚Ññ${dbLesson.lesson_number}: ${dbLesson.title.substring(0, 50)}...`);
      
      if (!hasTemplate) {
        dbIssues.push(`–£—Ä–æ–∫ ${dbLesson.lesson_number} –≤ –ë–î –Ω–µ –∏–º–µ–µ—Ç —à–∞–±–ª–æ–Ω–∞`);
      }
      
      if (!fsLesson) {
        dbIssues.push(`–£—Ä–æ–∫ ${dbLesson.lesson_number} –µ—Å—Ç—å –≤ –ë–î, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ`);
      } else if (fsLesson.lesson.title !== dbLesson.title) {
        console.log(`  ‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è:`);
        console.log(`     –§–°: ${fsLesson.lesson.title}`);
        console.log(`     –ë–î: ${dbLesson.title}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞
      if (hasTemplate) {
        const template = dbLesson.content.template;
        const intro = template['üëã –í–≤–µ–¥–µ–Ω–∏–µ'] || template.introduction;
        if (intro && intro.toLowerCase().includes('—Ç–µ–π–ø')) {
          console.log(`  ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í —à–∞–±–ª–æ–Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ "—Ç–µ–π–ø"!`);
          dbIssues.push(`–£—Ä–æ–∫ ${dbLesson.lesson_number}: —à–∞–±–ª–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ "—Ç–µ–π–ø" (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)`);
        }
      }
    }
    console.log('');
    
    // –ù–∞–π—Ç–∏ —É—Ä–æ–∫–∏ –∏–∑ –§–°, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ë–î
    for (const { folder, lesson } of lessonData) {
      const inDb = dbLessons.find(l => l.lesson_number === lesson.number);
      if (!inDb) {
        dbIssues.push(`–£—Ä–æ–∫ ${lesson.number} –∏–∑ –ø–∞–ø–∫–∏ ${folder} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î`);
      }
    }
  }
  
  if (dbIssues.length > 0) {
    console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    dbIssues.forEach(issue => console.log(`  - ${issue}`));
    console.log('');
  } else {
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ!\n');
  }
  
  // 3. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('‚ïê'.repeat(80));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
  console.log('‚ïê'.repeat(80));
  
  const totalIssues = fileSystemIssues.length + dbIssues.length;
  
  if (totalIssues === 0) {
    console.log('‚úÖ –í—Å–µ —É—Ä–æ–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ!');
    console.log('‚úÖ –ù–æ–º–µ—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–º–µ—Ä–∞–º —É—Ä–æ–∫–æ–≤');
    console.log('‚úÖ –í—Å–µ —É—Ä–æ–∫–∏ –∏–º–µ—é—Ç —à–∞–±–ª–æ–Ω—ã');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π');
  } else {
    console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${totalIssues}`);
    console.log('');
    
    if (fileSystemIssues.length > 0) {
      console.log('üìÅ –ü—Ä–æ–±–ª–µ–º—ã —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:');
      fileSystemIssues.forEach(issue => console.log(`  - ${issue}`));
      console.log('');
    }
    
    if (dbIssues.length > 0) {
      console.log('üíæ –ü—Ä–æ–±–ª–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
      dbIssues.forEach(issue => console.log(`  - ${issue}`));
      console.log('');
    }
    
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    if (fileSystemIssues.some(i => i.includes('–Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'))) {
      console.log('  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: scripts/fix-lesson-folders.sh');
    }
    if (dbIssues.some(i => i.includes('–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î')) || fileSystemIssues.some(i => i.includes('–Ω–µ –∏–º–µ–µ—Ç —à–∞–±–ª–æ–Ω–∞'))) {
      console.log('  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx tsx --env-file=.env.local scripts/import-lessons.ts');
    }
    if (dbIssues.some(i => i.includes('—Ç–µ–π–ø'))) {
      console.log('  3. –ò—Å–ø—Ä–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç');
    }
  }
  
  console.log('');
}

validateLessons().catch(console.error);
