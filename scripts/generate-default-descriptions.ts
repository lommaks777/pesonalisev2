/**
 * Generate Default Lesson Descriptions
 * 
 * Creates standard, non-personalized descriptions for all lessons
 * These are shown to users who haven't completed the survey
 * 
 * Stores in lessons.default_description (JSONB field)
 */

import "dotenv/config";
import { createClient } from "@supabase/supabase-js";
import { getOpenAIClient } from "../lib/services/openai";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

interface DefaultDescription {
  introduction: string;
  what_you_will_learn: string[];
  practical_benefits: string;
  key_techniques: string[];
  recommended_for: string;
  preparation_tips: string;
  next_steps: string;
}

/**
 * Generate default description from transcript
 */
async function generateDefaultDescription(
  transcript: string,
  lessonTitle: string,
  lessonNumber: number,
  courseName: string
): Promise<DefaultDescription> {
  const openai = getOpenAIClient();

  const prompt = `–¢—ã - –º–µ—Ç–æ–¥–∏—Å—Ç –∫—É—Ä—Å–∞ "${courseName}". –°–æ–∑–¥–∞–π –°–¢–ê–ù–î–ê–†–¢–ù–û–ï (–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ) –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –£–†–û–ö–ï:
–ù–æ–º–µ—Ä: ${lessonNumber}
–ù–∞–∑–≤–∞–Ω–∏–µ: ${lessonTitle}
–ö—É—Ä—Å: ${courseName}

–ü–û–õ–ù–´–ô –¢–†–ê–ù–°–ö–†–ò–ü–¢ –£–†–û–ö–ê (${transcript.length} —Å–∏–º–≤–æ–ª–æ–≤):
${transcript}

–ó–ê–î–ê–ù–ò–ï:
–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –¢–û–õ–¨–ö–û –Ω–∞ —Ñ–∞–∫—Ç–∞—Ö –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.

–°–¢–†–£–ö–¢–£–†–ê (7 —Ä–∞–∑–¥–µ–ª–æ–≤):

1. **introduction** (–í–≤–µ–¥–µ–Ω–∏–µ):
   - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã —É—Ä–æ–∫–∞
   - –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   - 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
   - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏

2. **what_you_will_learn** (–ß—Ç–æ –≤—ã —É–∑–Ω–∞–µ—Ç–µ):
   - –ú–∞—Å—Å–∏–≤ –∏–∑ 4-6 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤/–∑–Ω–∞–Ω–∏–π –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
   - –§–æ—Ä–º–∞—Ç: "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ...", "–¢–µ—Ö–Ω–∏–∫–∞...", "–ü—Ä–∏–Ω—Ü–∏–ø—ã..."
   - –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç ‚â§ 20 —Å–ª–æ–≤
   - –ë–µ–∑ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑, —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞

3. **practical_benefits** (–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ª—å–∑–∞):
   - –ö–∞–∫ —ç—Ç–∏ –∑–Ω–∞–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ
   - –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å–º–æ–∂–µ—Ç —Ä–µ—à–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞
   - 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   - –ò–∑–±–µ–≥–∞–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –æ–±–µ—â–∞–Ω–∏–π

4. **key_techniques** (–ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏):
   - –ú–∞—Å—Å–∏–≤ –∏–∑ 3-5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –∏–∑ —É—Ä–æ–∫–∞
   - –ù–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫ –∏–ª–∏ –∑–æ–Ω —Ä–∞–±–æ—Ç—ã –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
   - –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç ‚â§ 15 —Å–ª–æ–≤
   - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é

5. **recommended_for** (–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è):
   - –î–ª—è –∫–æ–≥–æ —ç—Ç–æ—Ç —É—Ä–æ–∫ –±—É–¥–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–µ–Ω
   - –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, —Ç–∏–ø –ø—Ä–∞–∫—Ç–∏–∫–∏, —Ü–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è
   - 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–æ–Ω, –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏

6. **preparation_tips** (–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —É—Ä–æ–∫—É):
   - –ß—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏
   - –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç—Ä–∞–±–æ—Ç–∫–µ
   - 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

7. **next_steps** (–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏):
   - –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–∫–∞
   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
   - 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
‚úì –†–∞–±–æ—Ç–∞–π –¢–û–õ–¨–ö–û —Å —Ñ–∞–∫—Ç–∞–º–∏ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
‚úì –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å –º–∞—Å—Å–∞–∂—É"
‚úì –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
‚úì –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω, –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
‚úì –Ø–∑—ã–∫: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π (B1-B2)
‚úì –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ "–≤—ã"

–ó–ê–ü–†–ï–¢–´:
‚úó –ù–µ –æ–±—Ä–∞—â–∞–π—Å—è –ø–æ –∏–º–µ–Ω–∏
‚úó –ù–µ —É–ø–æ–º–∏–Ω–∞–π —Å—Ç—Ä–∞—Ö–∏, —Ü–µ–ª–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—é
‚úó –ù–µ –¥–æ–±–∞–≤–ª—è–π —Ç–µ—Ö–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ
‚úó –ù–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ–±–µ—â–∞–Ω–∏–π
‚úó –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–ª–∏—à–µ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{
  "introduction": "—Å—Ç—Ä–æ–∫–∞",
  "what_you_will_learn": ["–ø—É–Ω–∫—Ç 1", "–ø—É–Ω–∫—Ç 2", "–ø—É–Ω–∫—Ç 3", "–ø—É–Ω–∫—Ç 4"],
  "practical_benefits": "—Å—Ç—Ä–æ–∫–∞",
  "key_techniques": ["—Ç–µ—Ö–Ω–∏–∫–∞ 1", "—Ç–µ—Ö–Ω–∏–∫–∞ 2", "—Ç–µ—Ö–Ω–∏–∫–∞ 3"],
  "recommended_for": "—Å—Ç—Ä–æ–∫–∞",
  "preparation_tips": "—Å—Ç—Ä–æ–∫–∞",
  "next_steps": "—Å—Ç—Ä–æ–∫–∞"
}

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ markdown –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: "–¢—ã - –º–µ—Ç–æ–¥–∏—Å—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤. –°–æ–∑–¥–∞—ë—à—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤. –û—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.",
        },
        {
          role: "user",
          content: prompt,
        },
      ],
      temperature: 0.6,
      max_tokens: 1500,
      response_format: { type: "json_object" },
    });

    const content = completion.choices[0]?.message?.content || "{}";
    
    // Clean potential markdown
    let cleanContent = content.trim();
    if (cleanContent.startsWith('```json')) {
      cleanContent = cleanContent.replace(/^```json\s*/, '').replace(/\s*```$/, '');
    }
    if (cleanContent.startsWith('```')) {
      cleanContent = cleanContent.replace(/^```\s*/, '').replace(/\s*```$/, '');
    }

    const parsed = JSON.parse(cleanContent);
    
    // Validate structure
    if (!parsed.introduction || !Array.isArray(parsed.what_you_will_learn)) {
      throw new Error("Invalid response structure");
    }

    return parsed as DefaultDescription;

  } catch (error) {
    console.error(`Error generating default description:`, error);
    
    // Return fallback
    return {
      introduction: `–í —É—Ä–æ–∫–µ ${lessonNumber} "${lessonTitle}" –≤—ã –æ—Å–≤–æ–∏—Ç–µ –≤–∞–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—à–∏—Ä—è—Ç –≤–∞—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.`,
      what_you_will_learn: [
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç—ã, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —É—Ä–æ–∫–µ",
        "–ü—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏—ë–º–æ–≤",
        "–ö—Ä–∏—Ç–µ—Ä–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã",
        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–¥ —Ä–∞–∑–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
      ],
      practical_benefits: "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—Ç –≤–∞–º —É–≤–µ—Ä–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∏–∑–±–µ–≥–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫. –í—ã —Å–º–æ–∂–µ—Ç–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—ë–º—ã –ø–æ–¥ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.",
      key_techniques: [
        "–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ —É—Ä–æ–∫–∞",
        "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫ –∏ –∫–æ—Ä–ø—É—Å–∞",
        "–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–∞–≤–ª–µ–Ω–∏—è –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞"
      ],
      recommended_for: "–≠—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ –Ω–∞—á–∏–Ω–∞—é—â–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º, —Ç–∞–∫ –∏ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–º –º–∞—Å—Ç–µ—Ä–∞–º, –∂–µ–ª–∞—é—â–∏–º —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è –∏ –æ—Å–≤–æ–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—ã –≤ —Ä–∞–±–æ—Ç–µ.",
      preparation_tips: "–î–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: –º–∞—Å—Å–∞–∂–Ω–æ–µ –º–∞—Å–ª–æ –∏–ª–∏ –∫—Ä–µ–º, —á–∏—Å—Ç—ã–µ –ø–æ–ª–æ—Ç–µ–Ω—Ü–∞, —É–¥–æ–±–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–±–æ—Ç—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –Ω–∞ –º–æ–¥–µ–ª–∏.",
      next_steps: "–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–∫–∞ –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏, –¥–µ–ª–∞—è –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º –º–æ–º–µ–Ω—Ç–∞–º. –ù–∞—á–Ω–∏—Ç–µ —Å –±–∞–∑–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º."
    };
  }
}

/**
 * Process all lessons for a course
 */
async function processAllLessons(courseSlug?: string) {
  console.log("======================================================================");
  console.log("üé® –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–¢–ê–ù–î–ê–†–¢–ù–´–• –û–ü–ò–°–ê–ù–ò–ô –£–†–û–ö–û–í");
  console.log("======================================================================");
  
  if (courseSlug) {
    console.log(`üìö –ö—É—Ä—Å: ${courseSlug}`);
  } else {
    console.log("üìö –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤");
  }
  
  console.log("======================================================================\n");

  // Get courses
  const coursesQuery = courseSlug
    ? supabase.from("courses").select("*").eq("slug", courseSlug)
    : supabase.from("courses").select("*");

  const { data: courses, error: coursesError } = await coursesQuery;

  if (coursesError || !courses || courses.length === 0) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤:", coursesError);
    return;
  }

  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤: ${courses.length}\n`);

  for (const course of courses) {
    console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
    console.log(`üìö –ö—É—Ä—Å: ${course.name} (${course.slug})`);
    console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`);

    // Get lessons with transcripts
    const { data: lessons, error: lessonsError } = await supabase
      .from("lessons")
      .select("*")
      .eq("course_id", course.id)
      .not("content", "is", null)
      .order("lesson_number");

    if (lessonsError || !lessons || lessons.length === 0) {
      console.log(`‚ö†Ô∏è  –£—Ä–æ–∫–æ–≤ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n`);
      continue;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏: ${lessons.length}\n`);

    let processed = 0;
    let skipped = 0;
    let errors = 0;

    for (const lesson of lessons) {
      const transcript = lesson.content?.transcription;
      
      if (!transcript || transcript.trim().length < 500) {
        console.log(`‚è≠Ô∏è  –£—Ä–æ–∫ ${lesson.lesson_number}: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–ø—É—Å–∫`);
        skipped++;
        continue;
      }

      // Check if default_description already exists
      if (lesson.default_description && Object.keys(lesson.default_description).length > 0) {
        console.log(`‚è≠Ô∏è  –£—Ä–æ–∫ ${lesson.lesson_number} "${lesson.title}": –æ–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫`);
        skipped++;
        continue;
      }

      console.log(`üîÑ –£—Ä–æ–∫ ${lesson.lesson_number}: "${lesson.title}"`);
      console.log(`   –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: ${transcript.length} —Å–∏–º–≤–æ–ª–æ–≤`);

      try {
        // Generate description
        const description = await generateDefaultDescription(
          transcript,
          lesson.title,
          lesson.lesson_number,
          course.name
        );

        // Save to database
        const { error: updateError } = await supabase
          .from("lessons")
          .update({ default_description: description })
          .eq("id", lesson.id);

        if (updateError) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:`, updateError);
          errors++;
        } else {
          console.log(`   ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n`);
          processed++;
        }

        // Small delay to avoid rate limits
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`, error);
        errors++;
      }
    }

    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫—É—Ä—Å–∞ "${course.name}":`);
    console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}`);
    console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errors}\n`);
  }

  console.log("======================================================================");
  console.log("‚úÖ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê");
  console.log("======================================================================");
}

// Main
const courseSlug = process.argv[2]; // Optional course slug argument
processAllLessons(courseSlug).catch(console.error);
