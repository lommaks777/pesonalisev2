import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !serviceRoleKey) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '–∑–∞–≥—Ä—É–∂–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', serviceRoleKey ? '–∑–∞–≥—Ä—É–∂–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, serviceRoleKey);

async function checkLesson2() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–∫–∞ 2 –∫—É—Ä—Å–∞ massazh-shvz...\n');
  
  // 1. –ù–∞–π—Ç–∏ –∫—É—Ä—Å
  const { data: course } = await supabase
    .from('courses')
    .select('id, slug, title')
    .eq('slug', 'massazh-shvz')
    .maybeSingle();
  
  if (!course) {
    console.log('‚ùå –ö—É—Ä—Å massazh-shvz –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  console.log('‚úÖ –ö—É—Ä—Å –Ω–∞–π–¥–µ–Ω:', course);
  console.log('');
  
  // 2. –ù–∞–π—Ç–∏ —É—Ä–æ–∫ 2
  const { data: lesson } = await supabase
    .from('lessons')
    .select('id, lesson_number, title, course_id, content')
    .eq('course_id', course.id)
    .eq('lesson_number', 2)
    .maybeSingle();
  
  if (!lesson) {
    console.log('‚ùå –£—Ä–æ–∫ 2 –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  console.log('‚úÖ –£—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω:', {
    id: lesson.id,
    number: lesson.lesson_number,
    title: lesson.title,
    course_id: lesson.course_id
  });
  console.log('');
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å content.template
  if (lesson.content?.template) {
    console.log('‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
    console.log('–ö–ª—é—á–∏ —à–∞–±–ª–æ–Ω–∞:', Object.keys(lesson.content.template));
    console.log('');
    console.log('üìÑ –ü–æ–ª–Ω—ã–π —à–∞–±–ª–æ–Ω:');
    console.log(JSON.stringify(lesson.content.template, null, 2));
  } else {
    console.log('‚ö†Ô∏è –®–∞–±–ª–æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ content.template');
    console.log('Content:', lesson.content);
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ "—Ç–µ–π–ø" –≤ —à–∞–±–ª–æ–Ω–µ
  const templateStr = JSON.stringify(lesson.content);
  if (templateStr.toLowerCase().includes('—Ç–µ–π–ø')) {
    console.log('\n‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í —à–∞–±–ª–æ–Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ "—Ç–µ–π–ø"!');
    const matches = templateStr.match(/—Ç–µ–π–ø[–∞-—è]*/gi);
    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è:', [...new Set(matches)]);
  } else {
    console.log('\n‚úÖ –°–ª–æ–≤–æ "—Ç–µ–π–ø" –≤ —à–∞–±–ª–æ–Ω–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ');
  }
}

checkLesson2().catch(console.error);
