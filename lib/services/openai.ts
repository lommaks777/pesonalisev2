import OpenAI from "openai";

// Singleton OpenAI client
let openaiClient: OpenAI | null = null;

/**
 * Returns singleton OpenAI instance
 */
export function getOpenAIClient(): OpenAI {
  if (!openaiClient) {
    openaiClient = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  }
  return openaiClient;
}

// New 7-section personalized content structure
export interface PersonalizedContent {
  introduction: string;
  key_points: string[];
  practical_tips: string[];
  important_notes?: string[];
  equipment_preparation?: string;
  homework: string;
  motivational_line: string;
}

// Legacy 5-field structure (for backward compatibility)
export interface LegacyPersonalizedContent {
  summary_short: string;
  why_watch: string;
  quick_action: string;
  social_share: string;
  homework_20m: string;
  prev_lessons?: string;
}

export interface SurveyData {
  motivation?: string[];
  target_clients?: string;
  skills_wanted?: string;
  fears?: string[];
  wow_result?: string;
  practice_model?: string;
}

export interface LessonInfo {
  lesson_number: number;
  title: string;
  summary?: string | null;
}

/**
 * Personalization prompt template for new 7-section structure
 */
function createPersonalizationPrompt(
  template: any,
  survey: SurveyData,
  userName: string
): string {
  return `–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Å—Å–∞–∂–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –§–æ–º–∏–Ω–∞. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω —É—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∫–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞.

–®–ê–ë–õ–û–ù –£–†–û–ö–ê:
${JSON.stringify(template, null, 2)}

–ê–ù–ö–ï–¢–ê –°–¢–£–î–ï–ù–¢–ê:
- –ò–º—è: ${userName}
- –ú–æ—Ç–∏–≤–∞—Ü–∏—è: ${survey.motivation?.join(", ") || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
- –¶–µ–ª–µ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: ${survey.target_clients || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
- –ñ–µ–ª–∞–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: ${survey.skills_wanted || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
- –°—Ç—Ä–∞—Ö–∏/–æ–ø–∞—Å–µ–Ω–∏—è: ${survey.fears?.join(", ") || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
- –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${survey.wow_result || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
- –ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏: ${survey.practice_model || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}

–ó–ê–î–ê–ù–ò–ï:
–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª —à–∞–±–ª–æ–Ω–∞ –ø–æ–¥ —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:

1. **introduction** (–í–≤–µ–¥–µ–Ω–∏–µ):
   - –û–±—Ä–∞—â–∞–π—Å—è –∫ —Å—Ç—É–¥–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏
   - –£–∫–∞–∂–∏ —Ü–µ–ª—å —É—Ä–æ–∫–∞ –∏ —Å–≤—è–∑—å —Å –∏—Ö –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
   - 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

2. **key_points** (–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã):
   - –ú–∞—Å—Å–∏–≤ –∏–∑ 4-6 –ø—É–Ω–∫—Ç–æ–≤
   - –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç ‚â§18 —Å–ª–æ–≤
   - –§–æ—Ä–º–∞—Ç: "—É–∑–Ω–∞–µ—Ç–µ/–Ω–∞—É—á–∏—Ç–µ—Å—å/–ø–æ–π–º—ë—Ç–µ..."
   - –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø—Ä–∏–º–µ—Ä—ã –ø–æ–¥ —Ü–µ–ª–µ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞

3. **practical_tips** (–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã):
   - –ú–∞—Å—Å–∏–≤ –∏–∑ 3-5 –ø—É–Ω–∫—Ç–æ–≤-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
   - –ö–∞–∂–¥—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≥–ª–∞–≥–æ–ª–∞ ("–î–µ–ª–∞–π—Ç–µ", "–ò–∑–±–µ–≥–∞–π—Ç–µ", "–°–ª–µ–¥–∏—Ç–µ")
   - –î–æ–±–∞–≤—å —Å–æ–≤–µ—Ç—ã —Å —É—á—ë—Ç–æ–º —Å—Ç—Ä–∞—Ö–æ–≤ –∏ –æ–ø–∞—Å–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞

4. **important_notes** (–í–∞–∂–Ω–æ) - –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ô:
   - –ú–∞—Å—Å–∏–≤ –∏–∑ 2-4 –ø—É–Ω–∫—Ç–æ–≤
   - –í–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —à–∞–±–ª–æ–Ω–µ –µ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
   - –ü–æ–¥—á–µ—Ä–∫–Ω–∏ –º–æ–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞—Ö–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞

5. **equipment_preparation** (–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞) - –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ô:
   - –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   - –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ –º–æ–¥–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ (–¥–æ–º/—Å—Ç—É–¥–∏—è/–º–æ–±–∏–ª—å–Ω—ã–π)
   - –í–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —à–∞–±–ª–æ–Ω–µ –µ—Å—Ç—å —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

6. **homework** (–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ):
   - 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
   - –ê–¥–∞–ø—Ç–∏—Ä—É–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥ –æ–ø—ã—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
   - –£—á–∏—Ç—ã–≤–∞–π –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏

7. **motivational_line** (–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞):
   - 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
   - –°–≤—è–∂–∏ —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ (wow_result)
   - –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–æ–Ω, –±–µ–∑ –ø–∞—Ñ–æ—Å–∞

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è key_points, practical_tips, important_notes
- –ï—Å–ª–∏ –≤ —à–∞–±–ª–æ–Ω–µ –Ω–µ—Ç important_notes –∏–ª–∏ equipment_preparation - –Ω–µ –¥–æ–±–∞–≤–ª—è–π –∏—Ö
- –í—Å–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ "–≤—ã"
- –Ø—Å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —è–∑—ã–∫ (—É—Ä–æ–≤–µ–Ω—å B1-B2)

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (JSON):
{
  "introduction": "—Å—Ç—Ä–æ–∫–∞",
  "key_points": ["–ø—É–Ω–∫—Ç 1", "–ø—É–Ω–∫—Ç 2", ...],
  "practical_tips": ["—Å–æ–≤–µ—Ç 1", "—Å–æ–≤–µ—Ç 2", ...],
  "important_notes": ["–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ 1", ...] // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
  "equipment_preparation": "—Å—Ç—Ä–æ–∫–∞", // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
  "homework": "—Å—Ç—Ä–æ–∫–∞",
  "motivational_line": "—Å—Ç—Ä–æ–∫–∞"
}

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;
}

/**
 * Core personalization logic with error handling
 * Returns personalized content or fallback to original template on error
 */
export async function personalizeLesson(
  template: any,
  survey: SurveyData,
  userName: string,
  lessonInfo: LessonInfo
): Promise<PersonalizedContent> {
  const openai = getOpenAIClient();

  // Fallback template structure with new 7-section format
  const fallbackTemplate: PersonalizedContent = {
    introduction: template.introduction || template["üëã –í–≤–µ–¥–µ–Ω–∏–µ"] || `–£—Ä–æ–∫ ${lessonInfo.lesson_number}: ${lessonInfo.title}`,
    key_points: template.key_points || template["üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã"] || [
      "–£–∑–Ω–∞–µ—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –º–∞—Å—Å–∞–∂–∞",
      "–ù–∞—É—á–∏—Ç–µ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
      "–ü–æ–π–º—ë—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
      "–û—Å–≤–æ–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∏—ë–º—ã"
    ],
    practical_tips: template.practical_tips || template["üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã"] || [
      "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–∞–∫—Ü–∏–µ–π –∫–ª–∏–µ–Ω—Ç–∞",
      "–ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –ª—ë–≥–∫–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è",
      "–ò–∑–±–µ–≥–∞–π—Ç–µ –±–æ–ª–µ–∑–Ω–µ–Ω–Ω—ã—Ö –æ—â—É—â–µ–Ω–∏–π"
    ],
    important_notes: template.important_notes || template["‚ö†Ô∏è –í–∞–∂–Ω–æ"],
    equipment_preparation: template.equipment_preparation || template["üß∞ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞"],
    homework: template.homework || template["üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"] || "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ —É—Ä–æ–∫–∞ –∏ –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å 10-15 –º–∏–Ω—É—Ç",
    motivational_line: template.motivational_line || template["_–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞_"] || "–ö–∞–∂–¥–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É",
  };

  const prompt = createPersonalizationPrompt(template, survey, userName);

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Å—Å–∞–∂–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —É—Ä–æ–∫–æ–≤. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.",
        },
        {
          role: "user",
          content: prompt,
        },
      ],
      temperature: 0.7,
      max_tokens: 1500,
    });

    const content = completion.choices[0]?.message?.content || "{}";
    
    // Clean up markdown code blocks if present
    let cleanContent = content.trim();
    if (cleanContent.startsWith('```json')) {
      cleanContent = cleanContent.replace(/^```json\s*/, '').replace(/\s*```$/, '');
    }
    if (cleanContent.startsWith('```')) {
      cleanContent = cleanContent.replace(/^```\s*/, '').replace(/\s*```$/, '');
    }
    
    const parsed = JSON.parse(cleanContent);
    
    // Validate and normalize the response
    const validated = validateAndNormalizeResponse(parsed, fallbackTemplate);
    
    return validated;
  } catch (error) {
    console.error("OpenAI API error:", error);
    // Return fallback template on error
    return fallbackTemplate;
  }
}

/**
 * Validates AI response and normalizes to expected structure
 */
function validateAndNormalizeResponse(
  response: any,
  fallback: PersonalizedContent
): PersonalizedContent {
  // Ensure arrays are arrays, not strings
  const ensureArray = (value: any, fallbackValue: string[]): string[] => {
    if (Array.isArray(value)) {
      return value.filter(item => typeof item === 'string' && item.trim().length > 0);
    }
    if (typeof value === 'string' && value.trim()) {
      // Try to split by line breaks if it's a multi-line string
      const lines = value.split(/[\n\r]+/).filter(line => line.trim());
      return lines.length > 1 ? lines : [value];
    }
    return fallbackValue;
  };
  
  return {
    introduction: response.introduction || fallback.introduction,
    key_points: ensureArray(response.key_points, fallback.key_points),
    practical_tips: ensureArray(response.practical_tips, fallback.practical_tips),
    important_notes: response.important_notes ? ensureArray(response.important_notes, []) : undefined,
    equipment_preparation: response.equipment_preparation || fallback.equipment_preparation,
    homework: response.homework || fallback.homework,
    motivational_line: response.motivational_line || fallback.motivational_line,
  };
}
